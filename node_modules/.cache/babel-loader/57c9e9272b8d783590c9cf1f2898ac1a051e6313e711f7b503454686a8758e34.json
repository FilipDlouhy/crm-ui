{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\nimport AllContactsDashboard from \"../Contacts-frontend/Components/AllContactsDashboard.vue\";\nimport ContactsByTypeDashobard from \"../Contacts-frontend/Components/ContactsByTypeDashobard.vue\";\nimport ContactPage from \"../Contacts-frontend/Components/ContactPage.vue\";\nimport store from \"@/store\";\nVue.use(VueRouter);\nconst routes = [{\n  path: \"/Users\",\n  component: UsersDashboard\n}, {\n  path: \"/Roles\",\n  component: RolesDashboard\n}, {\n  path: \"/Contacts/AllContacts\",\n  component: AllContactsDashboard\n}, {\n  path: \"/Contacts/Customers\",\n  component: ContactsByTypeDashobard\n}, {\n  path: \"/Contacts/Workers\",\n  component: ContactsByTypeDashobard\n}, {\n  path: \"/Contacts/Vendors\",\n  component: ContactsByTypeDashobard\n}, {\n  path: \"/Contacts/JobCandidates\",\n  component: ContactsByTypeDashobard\n}, {\n  path: \"/Contacts/ContactPage\",\n  component: ContactPage\n}, {\n  path: \"/\",\n  component: null\n}\n// Add a protected route that requires authentication\n];\n\nconst router = new VueRouter({\n  routes\n});\n\n// Add a navigation guard to check if a route requires authentication\nrouter.beforeEach(async (to, from, next) => {\n  await store.dispatch(\"checkUserLogin\");\n  if (store.getters.isUserLogged === false) {\n    if (to.path !== \"/\") {\n      next(\"/\");\n    } else {\n      next();\n    }\n  }\n  await store.dispatch(\"checkUserLogin\");\n  next();\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","UsersDashboard","RolesDashboard","AllContactsDashboard","ContactsByTypeDashobard","ContactPage","store","use","routes","path","component","router","beforeEach","to","from","next","dispatch","getters","isUserLogged"],"sources":["C:/Users/Fidlo/Desktop/crm/crm-ui/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\r\nimport VueRouter from \"vue-router\";\r\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\r\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\r\nimport AllContactsDashboard from \"../Contacts-frontend/Components/AllContactsDashboard.vue\";\r\nimport ContactsByTypeDashobard from \"../Contacts-frontend/Components/ContactsByTypeDashobard.vue\";\r\nimport ContactPage from \"../Contacts-frontend/Components/ContactPage.vue\";\r\nimport store from \"@/store\";\r\n\r\nVue.use(VueRouter);\r\n\r\nconst routes = [\r\n  { path: \"/Users\", component: UsersDashboard },\r\n  { path: \"/Roles\", component: RolesDashboard },\r\n  { path: \"/Contacts/AllContacts\", component: AllContactsDashboard },\r\n  { path: \"/Contacts/Customers\", component: ContactsByTypeDashobard },\r\n  { path: \"/Contacts/Workers\", component: ContactsByTypeDashobard },\r\n  { path: \"/Contacts/Vendors\", component: ContactsByTypeDashobard },\r\n  { path: \"/Contacts/JobCandidates\", component: ContactsByTypeDashobard },\r\n  { path: \"/Contacts/ContactPage\", component: ContactPage },\r\n  { path: \"/\", component: null },\r\n  // Add a protected route that requires authentication\r\n];\r\n\r\nconst router = new VueRouter({\r\n  routes,\r\n});\r\n\r\n// Add a navigation guard to check if a route requires authentication\r\nrouter.beforeEach(async (to, from, next) => {\r\n  await store.dispatch(\"checkUserLogin\");\r\n\r\n  if (store.getters.isUserLogged === false) {\r\n    if (to.path !== \"/\") {\r\n      next(\"/\");\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n  await store.dispatch(\"checkUserLogin\");\r\n  next();\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,iDAAiD;AAC5E,OAAOC,cAAc,MAAM,iDAAiD;AAC5E,OAAOC,oBAAoB,MAAM,0DAA0D;AAC3F,OAAOC,uBAAuB,MAAM,6DAA6D;AACjG,OAAOC,WAAW,MAAM,iDAAiD;AACzE,OAAOC,KAAK,MAAM,SAAS;AAE3BP,GAAG,CAACQ,GAAG,CAACP,SAAS,CAAC;AAElB,MAAMQ,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAET;AAAe,CAAC,EAC7C;EAAEQ,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAER;AAAe,CAAC,EAC7C;EAAEO,IAAI,EAAE,uBAAuB;EAAEC,SAAS,EAAEP;AAAqB,CAAC,EAClE;EAAEM,IAAI,EAAE,qBAAqB;EAAEC,SAAS,EAAEN;AAAwB,CAAC,EACnE;EAAEK,IAAI,EAAE,mBAAmB;EAAEC,SAAS,EAAEN;AAAwB,CAAC,EACjE;EAAEK,IAAI,EAAE,mBAAmB;EAAEC,SAAS,EAAEN;AAAwB,CAAC,EACjE;EAAEK,IAAI,EAAE,yBAAyB;EAAEC,SAAS,EAAEN;AAAwB,CAAC,EACvE;EAAEK,IAAI,EAAE,uBAAuB;EAAEC,SAAS,EAAEL;AAAY,CAAC,EACzD;EAAEI,IAAI,EAAE,GAAG;EAAEC,SAAS,EAAE;AAAK;AAC7B;AAAA,CACD;;AAED,MAAMC,MAAM,GAAG,IAAIX,SAAS,CAAC;EAC3BQ;AACF,CAAC,CAAC;;AAEF;AACAG,MAAM,CAACC,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C,MAAMT,KAAK,CAACU,QAAQ,CAAC,gBAAgB,CAAC;EAEtC,IAAIV,KAAK,CAACW,OAAO,CAACC,YAAY,KAAK,KAAK,EAAE;IACxC,IAAIL,EAAE,CAACJ,IAAI,KAAK,GAAG,EAAE;MACnBM,IAAI,CAAC,GAAG,CAAC;IACX,CAAC,MAAM;MACLA,IAAI,CAAC,CAAC;IACR;EACF;EACA,MAAMT,KAAK,CAACU,QAAQ,CAAC,gBAAgB,CAAC;EACtCD,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;AAEF,eAAeJ,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}