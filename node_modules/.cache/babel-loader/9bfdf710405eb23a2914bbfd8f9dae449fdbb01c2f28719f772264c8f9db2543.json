{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\nimport store from \"@/store\";\nVue.use(VueRouter);\nconst routes = [{\n  path: \"/Users\",\n  component: UsersDashboard\n}, {\n  path: \"/Roles\",\n  component: RolesDashboard\n}\n// Add a protected route that requires authentication\n];\n\nconst router = new VueRouter({\n  routes\n});\n\n// Add a navigation guard to check if a route requires authentication\nrouter.beforeEach(async (to, from, next) => {\n  const kunda = await store.dispatch(\"checkUserLogin\");\n  const isAuthenticated = await store.getters.isUserLogged;\n  console.log(store.getters.isUserLogged);\n  console.log(kunda);\n\n  // Check if the route requires authentication and the user is not authenticated\n  if (to.matched.some(record => record.meta.requiresAuth) && !isAuthenticated && isAuthenticated != null) {\n    console.log(\"KUNDO\");\n  } else {\n    next(); // Proceed to the route\n  }\n});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","UsersDashboard","RolesDashboard","store","use","routes","path","component","router","beforeEach","to","from","next","kunda","dispatch","isAuthenticated","getters","isUserLogged","console","log","matched","some","record","meta","requiresAuth"],"sources":["C:/Users/jdlou/OneDrive/Plocha/crmproject/crm-frontend/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\n\nimport store from \"@/store\";\n\nVue.use(VueRouter);\n\nconst routes = [\n  { path: \"/Users\", component: UsersDashboard },\n  { path: \"/Roles\", component: RolesDashboard },\n  // Add a protected route that requires authentication\n];\n\nconst router = new VueRouter({\n  routes,\n});\n\n// Add a navigation guard to check if a route requires authentication\nrouter.beforeEach(async (to, from, next) => {\n  const kunda = await store.dispatch(\"checkUserLogin\");\n\n  const isAuthenticated = await store.getters.isUserLogged;\n  console.log(store.getters.isUserLogged);\n  console.log(kunda);\n\n  // Check if the route requires authentication and the user is not authenticated\n  if (\n    to.matched.some((record) => record.meta.requiresAuth) &&\n    !isAuthenticated &&\n    isAuthenticated != null\n  ) {\n    console.log(\"KUNDO\");\n  } else {\n    next(); // Proceed to the route\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,iDAAiD;AAC5E,OAAOC,cAAc,MAAM,iDAAiD;AAE5E,OAAOC,KAAK,MAAM,SAAS;AAE3BJ,GAAG,CAACK,GAAG,CAACJ,SAAS,CAAC;AAElB,MAAMK,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAEN;AAAe,CAAC,EAC7C;EAAEK,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAEL;AAAe;AAC5C;AAAA,CACD;;AAED,MAAMM,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BK;AACF,CAAC,CAAC;;AAEF;AACAG,MAAM,CAACC,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C,MAAMC,KAAK,GAAG,MAAMV,KAAK,CAACW,QAAQ,CAAC,gBAAgB,CAAC;EAEpD,MAAMC,eAAe,GAAG,MAAMZ,KAAK,CAACa,OAAO,CAACC,YAAY;EACxDC,OAAO,CAACC,GAAG,CAAChB,KAAK,CAACa,OAAO,CAACC,YAAY,CAAC;EACvCC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;;EAElB;EACA,IACEH,EAAE,CAACU,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAACC,YAAY,CAAC,IACrD,CAACT,eAAe,IAChBA,eAAe,IAAI,IAAI,EACvB;IACAG,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACtB,CAAC,MAAM;IACLP,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;;AAEF,eAAeJ,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}