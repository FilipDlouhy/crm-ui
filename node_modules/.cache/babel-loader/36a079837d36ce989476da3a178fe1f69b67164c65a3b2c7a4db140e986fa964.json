{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst userServiceState = {\n  state: {\n    showUserAddForm: false,\n    selectedFilters: []\n  },\n  mutations: {\n    toggleUserAddForm(state, showForm) {\n      state.showUserAddForm = showForm;\n    },\n    addSelectedFilter(state, {\n      filterName,\n      filterValue\n    }) {\n      let valueChangeObject; // Initialize a variable to hold the object to be updated\n      let exists; // Initialize a variable to check if the object already exists\n      // Loop through the selectedFilters array to find the object\n      for (const filter of state.selectedFilters) {\n        if (filter.filterName === filterName) {\n          exists = true;\n          valueChangeObject = filter;\n          break;\n        }\n      }\n\n      // If the object doesn't exist, add it to the selectedFilters array\n      if (!exists) {\n        state.selectedFilters.push({\n          filterName,\n          filterValue\n        });\n      }\n\n      // If the object exists and the value needs to be changed\n      if (exists && valueChangeObject.filterValue !== filterValue) {\n        // Find the index of the object to delete based on filterName\n        const indexToDelete = state.selectedFilters.findIndex(filter => filter.filterName === filterName);\n\n        // Remove the existing object from the selectedFilters array\n        state.selectedFilters.splice(indexToDelete, 1);\n\n        // Push a new object with the updated filterValue\n        state.selectedFilters.push({\n          filterName,\n          filterValue\n        });\n      }\n    },\n    removeSelectedFilter(state, filterName) {\n      // Use filter method to create a new array without the filter to be removed\n      state.selectedFilters = state.selectedFilters.filter(filter => filter.filterName !== filterName);\n    }\n  },\n  actions: {\n    toggleUserAddForm({\n      commit\n    }, showForm) {\n      commit(\"toggleUserAddForm\", showForm);\n    },\n    addSelectedFilter({\n      commit\n    }, {\n      filterName,\n      filterValue\n    }) {\n      commit(\"addSelectedFilter\", {\n        filterName,\n        filterValue\n      });\n    },\n    removeSelectedFilter({\n      commit\n    }, filterName) {\n      commit(\"removeSelectedFilter\", filterName);\n    }\n  },\n  getters: {\n    showUserAddForm: state => state.showUserAddForm,\n    selectedFilters: state => state.selectedFilters\n  }\n};\nexport default userServiceState;","map":{"version":3,"names":["userServiceState","state","showUserAddForm","selectedFilters","mutations","toggleUserAddForm","showForm","addSelectedFilter","filterName","filterValue","valueChangeObject","exists","filter","push","indexToDelete","findIndex","splice","removeSelectedFilter","actions","commit","getters"],"sources":["C:/Users/jdlou/OneDrive/Plocha/crmproject/crm-frontend/src/Users-Frontend/State/userServiceState.js"],"sourcesContent":["const userServiceState = {\r\n  state: {\r\n    showUserAddForm: false,\r\n    selectedFilters: [],\r\n  },\r\n  mutations: {\r\n    toggleUserAddForm(state, showForm) {\r\n      state.showUserAddForm = showForm;\r\n    },\r\n    addSelectedFilter(state, { filterName, filterValue }) {\r\n      let valueChangeObject; // Initialize a variable to hold the object to be updated\r\n      let exists; // Initialize a variable to check if the object already exists\r\n      // Loop through the selectedFilters array to find the object\r\n      for (const filter of state.selectedFilters) {\r\n        if (filter.filterName === filterName) {\r\n          exists = true;\r\n          valueChangeObject = filter;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // If the object doesn't exist, add it to the selectedFilters array\r\n      if (!exists) {\r\n        state.selectedFilters.push({ filterName, filterValue });\r\n      }\r\n\r\n      // If the object exists and the value needs to be changed\r\n      if (exists && valueChangeObject.filterValue !== filterValue) {\r\n        // Find the index of the object to delete based on filterName\r\n        const indexToDelete = state.selectedFilters.findIndex(\r\n          (filter) => filter.filterName === filterName\r\n        );\r\n\r\n        // Remove the existing object from the selectedFilters array\r\n        state.selectedFilters.splice(indexToDelete, 1);\r\n\r\n        // Push a new object with the updated filterValue\r\n        state.selectedFilters.push({ filterName, filterValue });\r\n      }\r\n    },\r\n    removeSelectedFilter(state, filterName) {\r\n      // Use filter method to create a new array without the filter to be removed\r\n      state.selectedFilters = state.selectedFilters.filter(\r\n        (filter) => filter.filterName !== filterName\r\n      );\r\n    },\r\n  },\r\n  actions: {\r\n    toggleUserAddForm({ commit }, showForm) {\r\n      commit(\"toggleUserAddForm\", showForm);\r\n    },\r\n    addSelectedFilter({ commit }, { filterName, filterValue }) {\r\n      commit(\"addSelectedFilter\", { filterName, filterValue });\r\n    },\r\n    removeSelectedFilter({ commit }, filterName) {\r\n      commit(\"removeSelectedFilter\", filterName);\r\n    },\r\n  },\r\n  getters: {\r\n    showUserAddForm: (state) => state.showUserAddForm,\r\n    selectedFilters: (state) => state.selectedFilters,\r\n  },\r\n};\r\n\r\nexport default userServiceState;\r\n"],"mappings":";AAAA,MAAMA,gBAAgB,GAAG;EACvBC,KAAK,EAAE;IACLC,eAAe,EAAE,KAAK;IACtBC,eAAe,EAAE;EACnB,CAAC;EACDC,SAAS,EAAE;IACTC,iBAAiBA,CAACJ,KAAK,EAAEK,QAAQ,EAAE;MACjCL,KAAK,CAACC,eAAe,GAAGI,QAAQ;IAClC,CAAC;IACDC,iBAAiBA,CAACN,KAAK,EAAE;MAAEO,UAAU;MAAEC;IAAY,CAAC,EAAE;MACpD,IAAIC,iBAAiB,CAAC,CAAC;MACvB,IAAIC,MAAM,CAAC,CAAC;MACZ;MACA,KAAK,MAAMC,MAAM,IAAIX,KAAK,CAACE,eAAe,EAAE;QAC1C,IAAIS,MAAM,CAACJ,UAAU,KAAKA,UAAU,EAAE;UACpCG,MAAM,GAAG,IAAI;UACbD,iBAAiB,GAAGE,MAAM;UAC1B;QACF;MACF;;MAEA;MACA,IAAI,CAACD,MAAM,EAAE;QACXV,KAAK,CAACE,eAAe,CAACU,IAAI,CAAC;UAAEL,UAAU;UAAEC;QAAY,CAAC,CAAC;MACzD;;MAEA;MACA,IAAIE,MAAM,IAAID,iBAAiB,CAACD,WAAW,KAAKA,WAAW,EAAE;QAC3D;QACA,MAAMK,aAAa,GAAGb,KAAK,CAACE,eAAe,CAACY,SAAS,CAClDH,MAAM,IAAKA,MAAM,CAACJ,UAAU,KAAKA,UACpC,CAAC;;QAED;QACAP,KAAK,CAACE,eAAe,CAACa,MAAM,CAACF,aAAa,EAAE,CAAC,CAAC;;QAE9C;QACAb,KAAK,CAACE,eAAe,CAACU,IAAI,CAAC;UAAEL,UAAU;UAAEC;QAAY,CAAC,CAAC;MACzD;IACF,CAAC;IACDQ,oBAAoBA,CAAChB,KAAK,EAAEO,UAAU,EAAE;MACtC;MACAP,KAAK,CAACE,eAAe,GAAGF,KAAK,CAACE,eAAe,CAACS,MAAM,CACjDA,MAAM,IAAKA,MAAM,CAACJ,UAAU,KAAKA,UACpC,CAAC;IACH;EACF,CAAC;EACDU,OAAO,EAAE;IACPb,iBAAiBA,CAAC;MAAEc;IAAO,CAAC,EAAEb,QAAQ,EAAE;MACtCa,MAAM,CAAC,mBAAmB,EAAEb,QAAQ,CAAC;IACvC,CAAC;IACDC,iBAAiBA,CAAC;MAAEY;IAAO,CAAC,EAAE;MAAEX,UAAU;MAAEC;IAAY,CAAC,EAAE;MACzDU,MAAM,CAAC,mBAAmB,EAAE;QAAEX,UAAU;QAAEC;MAAY,CAAC,CAAC;IAC1D,CAAC;IACDQ,oBAAoBA,CAAC;MAAEE;IAAO,CAAC,EAAEX,UAAU,EAAE;MAC3CW,MAAM,CAAC,sBAAsB,EAAEX,UAAU,CAAC;IAC5C;EACF,CAAC;EACDY,OAAO,EAAE;IACPlB,eAAe,EAAGD,KAAK,IAAKA,KAAK,CAACC,eAAe;IACjDC,eAAe,EAAGF,KAAK,IAAKA,KAAK,CAACE;EACpC;AACF,CAAC;AAED,eAAeH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}