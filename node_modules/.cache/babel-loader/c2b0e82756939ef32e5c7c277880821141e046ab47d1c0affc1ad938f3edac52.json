{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nconst rolesState = {\n  state: {\n    showRoleForm: false,\n    roles: [],\n    rolesToChange: [],\n    selectedFiltersRole: [],\n    selectedFiltersSortRole: []\n  },\n  mutations: {\n    setShowRoleForm(state, value) {\n      state.showRoleForm = value;\n    },\n    setRoles(state, roles) {\n      state.roles = roles;\n    },\n    addRole(state, role) {\n      if (state.roles.length > 25) {\n        state.roles.pop();\n        state.roles.push(role);\n      } else {\n        state.roles.push(role);\n      }\n    },\n    setRolesToChange(state, rolesToChange) {\n      state.rolesToChange = rolesToChange;\n    },\n    addSelectedFilterRole(state, filterValue) {\n      state.selectedFiltersRole.pop();\n      state.selectedFiltersRole.push({\n        filterName: \"role_name\",\n        filterValue\n      });\n    },\n    removeSelectedFilterRole(state) {\n      state.selectedFiltersRole = [];\n    },\n    addSelectedFilterSortRole(state, {\n      filterName,\n      ascending\n    }) {\n      let valueChangeObject; // Initialize a variable to hold the object to be updated\n      let exists; // Initialize a variable to check if the object already exists\n      // Loop through the selectedFiltersSortRole array to find the object\n      for (const filter of state.selectedFiltersSortRole) {\n        if (filter.filterName === filterName) {\n          exists = true;\n          valueChangeObject = filter;\n          break;\n        }\n      }\n\n      // If the object doesn't exist, add it to the selectedFiltersSortRole array\n      if (!exists) {\n        state.selectedFiltersSortRole.push({\n          filterName,\n          ascending\n        });\n      }\n\n      // If the object exists and the value needs to be changed\n      if (exists && valueChangeObject.ascending !== ascending) {\n        // Find the index of the object to delete based on filterName\n        const indexToDelete = state.selectedFiltersSortRole.findIndex(filter => filter.filterName === filterName);\n\n        // Remove the existing object from the selectedFiltersSortRole array\n        state.selectedFiltersSortRole.splice(indexToDelete, 1);\n\n        // Push a new object with the updated filterValue\n        state.selectedFiltersSortRole.push({\n          filterName,\n          ascending\n        });\n      }\n    }\n  },\n  actions: {\n    toggleRoleForm({\n      commit\n    }, show) {\n      commit(\"setShowRoleForm\", show);\n    },\n    addRole({\n      commit\n    }, role) {\n      commit(\"addRole\", role);\n    },\n    async getRoles({\n      commit,\n      state\n    }) {\n      try {\n        const response = await axios.get(\"http://localhost:5000/user/role/role-get\", {\n          params: {\n            page: state.page\n          },\n          withCredentials: true\n        });\n        commit(\"setRoles\", response.data.data);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n      }\n    },\n    setRolesToChange({\n      commit\n    }, roleToChange) {\n      commit(\"setRolesToChange\", roleToChange);\n    },\n    async deleteRoles({\n      state,\n      commit\n    }) {\n      let response;\n      console.log(state.rolesToChange);\n      if (state.rolesToChange.length === 1) {\n        response = await axios.get(\"http://localhost:5000/user/role/role-delete\", {\n          params: {\n            roleId: state.rolesToChange[0]\n          },\n          withCredentials: true\n        });\n      } else {\n        response = await axios.post(\"http://localhost:5000/user/role/roles-delete\", {\n          roles: state.rolesToChange\n        }, {\n          withCredentials: true\n        });\n      }\n      if (response.data.error === false) {\n        const newRoles = state.roles.filter(role => {\n          return !state.rolesToChange.includes(role.role_id);\n        });\n        commit(\"setRoles\", newRoles);\n        return response;\n      }\n      if (response.data.error.length > 0) {\n        return response;\n      }\n      return response;\n    },\n    addSelectedFilterRole({\n      commit\n    }, filterValue) {\n      commit(\"addSelectedFilterRole\", filterValue);\n    },\n    removeSelectedFilterRole({\n      commit\n    }) {\n      commit(\"removeSelectedFilterRole\");\n    },\n    async getRolesWithFilters({\n      commit,\n      state\n    }) {\n      try {\n        const response = await axios.post(\"http://localhost:5000/user/role/role-get-with-filter\", {\n          filters: state.selectedFiltersRole,\n          sortables: state.selectedFiltersSortRole\n        }, {\n          withCredentials: true\n        });\n        commit(\"setRoles\", response.data.data);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n      }\n    }\n  },\n  getters: {\n    showRoleForm: state => state.showRoleForm,\n    roles: state => state.roles,\n    rolesToChange: state => state.rolesToChange,\n    selectedFiltersRole: state => state.selectedFiltersRole\n  }\n};\nexport default rolesState;","map":{"version":3,"names":["axios","rolesState","state","showRoleForm","roles","rolesToChange","selectedFiltersRole","selectedFiltersSortRole","mutations","setShowRoleForm","value","setRoles","addRole","role","length","pop","push","setRolesToChange","addSelectedFilterRole","filterValue","filterName","removeSelectedFilterRole","addSelectedFilterSortRole","ascending","valueChangeObject","exists","filter","indexToDelete","findIndex","splice","actions","toggleRoleForm","commit","show","getRoles","response","get","params","page","withCredentials","data","error","console","roleToChange","deleteRoles","log","roleId","post","newRoles","includes","role_id","getRolesWithFilters","filters","sortables","getters"],"sources":["C:/Users/jdlou/OneDrive/Plocha/crmproject/crm-frontend/src/Users-Frontend/State/roleState.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst rolesState = {\r\n  state: {\r\n    showRoleForm: false,\r\n    roles: [],\r\n    rolesToChange: [],\r\n    selectedFiltersRole: [],\r\n    selectedFiltersSortRole: [],\r\n  },\r\n  mutations: {\r\n    setShowRoleForm(state, value) {\r\n      state.showRoleForm = value;\r\n    },\r\n\r\n    setRoles(state, roles) {\r\n      state.roles = roles;\r\n    },\r\n\r\n    addRole(state, role) {\r\n      if (state.roles.length > 25) {\r\n        state.roles.pop();\r\n        state.roles.push(role);\r\n      } else {\r\n        state.roles.push(role);\r\n      }\r\n    },\r\n\r\n    setRolesToChange(state, rolesToChange) {\r\n      state.rolesToChange = rolesToChange;\r\n    },\r\n\r\n    addSelectedFilterRole(state, filterValue) {\r\n      state.selectedFiltersRole.pop();\r\n      state.selectedFiltersRole.push({ filterName: \"role_name\", filterValue });\r\n    },\r\n\r\n    removeSelectedFilterRole(state) {\r\n      state.selectedFiltersRole = [];\r\n    },\r\n\r\n    addSelectedFilterSortRole(state, { filterName, ascending }) {\r\n      let valueChangeObject; // Initialize a variable to hold the object to be updated\r\n      let exists; // Initialize a variable to check if the object already exists\r\n      // Loop through the selectedFiltersSortRole array to find the object\r\n      for (const filter of state.selectedFiltersSortRole) {\r\n        if (filter.filterName === filterName) {\r\n          exists = true;\r\n          valueChangeObject = filter;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // If the object doesn't exist, add it to the selectedFiltersSortRole array\r\n      if (!exists) {\r\n        state.selectedFiltersSortRole.push({\r\n          filterName,\r\n          ascending,\r\n        });\r\n      }\r\n\r\n      // If the object exists and the value needs to be changed\r\n      if (exists && valueChangeObject.ascending !== ascending) {\r\n        // Find the index of the object to delete based on filterName\r\n        const indexToDelete = state.selectedFiltersSortRole.findIndex(\r\n          (filter) => filter.filterName === filterName\r\n        );\r\n\r\n        // Remove the existing object from the selectedFiltersSortRole array\r\n        state.selectedFiltersSortRole.splice(indexToDelete, 1);\r\n\r\n        // Push a new object with the updated filterValue\r\n        state.selectedFiltersSortRole.push({\r\n          filterName,\r\n          ascending,\r\n        });\r\n      }\r\n    },\r\n  },\r\n  actions: {\r\n    toggleRoleForm({ commit }, show) {\r\n      commit(\"setShowRoleForm\", show);\r\n    },\r\n\r\n    addRole({ commit }, role) {\r\n      commit(\"addRole\", role);\r\n    },\r\n\r\n    async getRoles({ commit, state }) {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:5000/user/role/role-get\",\r\n          {\r\n            params: {\r\n              page: state.page,\r\n            },\r\n            withCredentials: true,\r\n          }\r\n        );\r\n        commit(\"setRoles\", response.data.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    },\r\n\r\n    setRolesToChange({ commit }, roleToChange) {\r\n      commit(\"setRolesToChange\", roleToChange);\r\n    },\r\n\r\n    async deleteRoles({ state, commit }) {\r\n      let response;\r\n\r\n      console.log(state.rolesToChange);\r\n      if (state.rolesToChange.length === 1) {\r\n        response = await axios.get(\r\n          \"http://localhost:5000/user/role/role-delete\",\r\n          {\r\n            params: {\r\n              roleId: state.rolesToChange[0],\r\n            },\r\n            withCredentials: true,\r\n          }\r\n        );\r\n      } else {\r\n        response = await axios.post(\r\n          \"http://localhost:5000/user/role/roles-delete\",\r\n          {\r\n            roles: state.rolesToChange,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          }\r\n        );\r\n      }\r\n\r\n      if (response.data.error === false) {\r\n        const newRoles = state.roles.filter((role) => {\r\n          return !state.rolesToChange.includes(role.role_id);\r\n        });\r\n\r\n        commit(\"setRoles\", newRoles);\r\n        return response;\r\n      }\r\n\r\n      if (response.data.error.length > 0) {\r\n        return response;\r\n      }\r\n\r\n      return response;\r\n    },\r\n\r\n    addSelectedFilterRole({ commit }, filterValue) {\r\n      commit(\"addSelectedFilterRole\", filterValue);\r\n    },\r\n\r\n    removeSelectedFilterRole({ commit }) {\r\n      commit(\"removeSelectedFilterRole\");\r\n    },\r\n\r\n    async getRolesWithFilters({ commit, state }) {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/user/role/role-get-with-filter\",\r\n          {\r\n            filters: state.selectedFiltersRole,\r\n            sortables: state.selectedFiltersSortRole,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          }\r\n        );\r\n\r\n        commit(\"setRoles\", response.data.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    },\r\n  },\r\n  getters: {\r\n    showRoleForm: (state) => state.showRoleForm,\r\n    roles: (state) => state.roles,\r\n    rolesToChange: (state) => state.rolesToChange,\r\n    selectedFiltersRole: (state) => state.selectedFiltersRole,\r\n  },\r\n};\r\n\r\nexport default rolesState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}