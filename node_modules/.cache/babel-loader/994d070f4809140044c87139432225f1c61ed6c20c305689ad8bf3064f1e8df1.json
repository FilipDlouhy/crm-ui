{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport { mapGetters } from \"vuex\";\nimport RoleHelper from \"../RoleHelper\";\nexport default {\n  data() {\n    return {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      telNumber: \"\",\n      password: \"\",\n      rolesText: \"\",\n      rolesToAddOrRemove: [],\n      roleToRemoveOrAddId: undefined\n    };\n  },\n  computed: {\n    ...mapGetters({\n      showUserAddForm: \"showUserAddForm\",\n      updatedUser: \"updatedUser\",\n      updatedUserIndex: \"updatedUserIndex\",\n      roles: \"roles\"\n    })\n  },\n  methods: {\n    unShowAddUserForm() {\n      const userFormContainer = this.$refs.userFormContainer;\n\n      // Remove all classes from the element\n      userFormContainer.className = \"user-form-container-unshow\";\n\n      // After a delay of 1.25 seconds, toggle the Vuex state to false\n      setTimeout(() => {\n        this.$store.commit(\"toggleUserAddForm\", false);\n        this.$store.commit(\"setUpdatedUser\", null);\n        this.$store.commit(\"setUpdatedUserIndex\", null);\n      }, 1250);\n    },\n    // This asynchronous method is responsible for adding or updating a user's information.\n    async addOrUpdateUser() {\n      // Check for form validation errors by calling 'checkFormValues'.\n      const error = this.checkFormValues();\n\n      // If there are validation errors, return early without proceeding further.\n      if (error) {\n        return;\n      }\n\n      // If 'updatedUser' is not null, update an existing user.\n      if (this.updatedUser != null) {\n        // Prepare user data to send for updating an existing user.\n        const userDto = {\n          email: this.email,\n          roles: this.rolesToAddOrRemove,\n          last_name: this.lastName,\n          first_name: this.firstName,\n          tel_number: this.telNumber,\n          user_id: this.updatedUser.user_id\n        };\n\n        // Send a POST request to the server to update the user's information using axios.\n        const response = await axios.post(\"http://localhost:5000/user/update-user\", userDto, {\n          withCredentials: true\n        });\n\n        // Check if there is an error in the server response.\n        if (response.data.error) {\n          // Show a modal with the error message.\n          this.$store.commit(\"showModal\", response.data.error);\n          return;\n        }\n\n        // Show an informational popup indicating the user was updated.\n        this.$store.dispatch(\"openInfoPopUp\", \"User update\");\n\n        // If the user's roles have changed, fetch and update their rights.\n        if (response.data.isCurentChanged) {\n          const uniqueUserRighs = RoleHelper.fetchUserRights();\n\n          // Commit a Vuex mutation to set the user rights in the store.\n          this.$store.commit(\"setUserRights\", uniqueUserRighs);\n        }\n\n        // Dispatch an action to update the user in the store.\n        this.$store.dispatch(\"updateUser\", userDto);\n\n        // Call a method to hide the user creation/update form.\n        this.unShowAddUserForm();\n      } else {\n        // If 'updatedUser' is null, create a new user.\n\n        // Prepare user data to send for creating a new user.\n        const userDto = {\n          firstName: this.firstName,\n          lastName: this.lastName,\n          email: this.email,\n          telNumber: this.telNumber,\n          password: this.password\n        };\n        try {\n          // Send a POST request to the server to create a new user using axios.\n          const response = await axios.post(\"http://localhost:5000/user/user-create\", userDto, {\n            withCredentials: true\n          });\n\n          // Check if there is an error in the server response.\n          if (response.data.error) {\n            // Show a modal with the error message.\n            this.$store.commit(\"showModal\", response.data.error);\n            return;\n          }\n\n          // Hide the user creation form.\n          this.unShowAddUserForm();\n\n          // Show an informational popup indicating the user was created.\n          this.$store.dispatch(\"openInfoPopUp\", \"User created\");\n\n          // Commit a Vuex mutation to add the new user to the store.\n          this.$store.commit(\"addUser\", response.data);\n        } catch (error) {\n          // Handle errors that occur during the user creation process.\n          console.log(error);\n\n          // Show a modal with a generic error message.\n          this.$store.commit(\"showModal\", \"Something went wrong we are working on the repair\");\n        }\n      }\n    },\n    // This function validates form values and shows an error modal if validation fails.\n    checkFormValues() {\n      // Regular expressions for email and telephone number validation.\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      const telPattern = /^\\d{10}$/;\n      let error = \"\";\n\n      // Check various conditions for form validation.\n      switch (true) {\n        case this.firstName.length === 0:\n        case this.lastName.length === 0:\n        case this.email.length === 0:\n        case this.telNumber.length === 0:\n        case this.password.length === 0 && this.updatedUser == null:\n          error = \"Please fill all fields in the form\";\n          break;\n        case !emailPattern.test(this.email):\n          error = \"Please enter a valid email address\";\n          break;\n        case !telPattern.test(this.telNumber):\n          error = \"Please enter a valid telephone number\";\n          break;\n        case this.password.length < 8 && this.updatedUser == null:\n          error = \"Password should be at least 8 characters long\";\n          break;\n      }\n\n      // If there's an error, show it in a modal and return true to indicate validation failure.\n      if (error) {\n        this.$store.commit(\"showModal\", error);\n        return true;\n      }\n    },\n    // This function sets the form fields with values from the 'updatedUser' object.\n    setUpdateUser() {\n      if (this.updatedUser != null) {\n        this.firstName = this.updatedUser.first_name;\n        this.lastName = this.updatedUser.last_name;\n        this.email = this.updatedUser.email;\n        this.telNumber = this.updatedUser.tel_number;\n        this.rolesToAddOrRemove = this.updatedUser.roles.map(role => {\n          return role;\n        });\n\n        // If 'roles' is empty, fetch the roles using 'getRoles' action.\n        if (this.roles.length === 0) {\n          this.$store.dispatch(\"getRoles\");\n        }\n        // Set the text for selected roles.\n        this.setRoleText();\n      }\n    },\n    // This function sets the 'roleToRemoveOrAddId' variable for adding or removing roles.\n    setRoleToAddOrRemoveId(role) {\n      this.roleToRemoveOrAddId = role;\n    },\n    // This function adds or removes a role based on the 'add' parameter.\n    addOrRemoveRole(add) {\n      if (add) {\n        // Find the role to add based on 'roleToRemoveOrAddId'.\n        const roleToAdd = this.roles.filter(role => {\n          return role.role_id === this.roleToRemoveOrAddId;\n        });\n\n        // Extract role IDs from 'rolesToAddOrRemove'.\n        const roleIds = this.rolesToAddOrRemove.map(role => {\n          return role.role_id;\n        });\n\n        // Add the role if it's not already in 'rolesToAddOrRemove'.\n        if (!roleIds.includes(roleToAdd[0].role_id)) {\n          this.rolesToAddOrRemove.push({\n            displayName: roleToAdd[0].role_name,\n            role_id: roleToAdd[0].role_id\n          });\n        }\n      } else {\n        // Remove the role from 'rolesToAddOrRemove' based on 'roleToRemoveOrAddId'.\n        this.rolesToAddOrRemove = this.rolesToAddOrRemove.filter(role => {\n          return role.role_id !== this.roleToRemoveOrAddId;\n        });\n      }\n\n      // Update the text for selected roles.\n      this.setRoleText();\n    },\n    // This function sets the text representation of selected roles in 'rolesText'.\n    setRoleText() {\n      this.rolesText = \"\";\n\n      // Map selected roles to their display names and join them into a comma-separated string.\n      this.rolesText = this.rolesToAddOrRemove.map(role => {\n        return role.displayName;\n      });\n      this.rolesText = this.rolesText.join(\", \");\n    }\n  },\n  mounted() {\n    this.setUpdateUser();\n  },\n  watch: {\n    updatedUser() {\n      this.setUpdateUser();\n    }\n  }\n};","map":{"version":3,"names":["axios","mapGetters","RoleHelper","data","firstName","lastName","email","telNumber","password","rolesText","rolesToAddOrRemove","roleToRemoveOrAddId","undefined","computed","showUserAddForm","updatedUser","updatedUserIndex","roles","methods","unShowAddUserForm","userFormContainer","$refs","className","setTimeout","$store","commit","addOrUpdateUser","error","checkFormValues","userDto","last_name","first_name","tel_number","user_id","response","post","withCredentials","dispatch","isCurentChanged","uniqueUserRighs","fetchUserRights","console","log","emailPattern","telPattern","length","test","setUpdateUser","map","role","setRoleText","setRoleToAddOrRemoveId","addOrRemoveRole","add","roleToAdd","filter","role_id","roleIds","includes","push","displayName","role_name","join","mounted","watch"],"sources":["src/Users-Frontend/Components/AddUpdateUserForm.vue"],"sourcesContent":["<template>\r\n  <div\r\n    ref=\"userFormContainer\"\r\n    :class=\"\r\n      showUserAddForm\r\n        ? 'user-form-container-show'\r\n        : 'user-form-container-unshow'\r\n    \"\r\n  >\r\n    <div class=\"user-form\">\r\n      <i @click=\"unShowAddUserForm\" class=\"material-icons\"> login </i>\r\n      <div class=\"user-form-header\">\r\n        <h1>Create User</h1>\r\n      </div>\r\n      <div>\r\n        <div class=\"user-form-login-data-input-container\">\r\n          <div>\r\n            <p>First Name</p>\r\n            <input v-model=\"firstName\" type=\"text\" />\r\n          </div>\r\n          <div>\r\n            <p>Last Name</p>\r\n            <input v-model=\"lastName\" type=\"text\" />\r\n          </div>\r\n          <div>\r\n            <p>Email</p>\r\n            <input v-model=\"email\" type=\"text\" />\r\n          </div>\r\n          <div>\r\n            <p>Telephone</p>\r\n            <input v-model=\"telNumber\" type=\"tel\" />\r\n          </div>\r\n          <div v-if=\"updatedUser == null\">\r\n            <p>Password</p>\r\n            <input v-model=\"password\" type=\"password\" />\r\n          </div>\r\n\r\n          <div v-if=\"updatedUser != null\">\r\n            <p>Roles: {{ rolesText }}</p>\r\n          </div>\r\n\r\n          <div v-if=\"updatedUser != null\">\r\n            <select @change=\"setRoleToAddOrRemoveId($event.target.value)\">\r\n              <option></option>\r\n\r\n              <option\r\n                v-for=\"role in roles\"\r\n                :key=\"role.role_id\"\r\n                :value=\"role.role_id\"\r\n              >\r\n                {{ role.role_name }}\r\n              </option>\r\n            </select>\r\n\r\n            <div>\r\n              <button @click=\"addOrRemoveRole(true)\">Add</button>\r\n              <button @click=\"addOrRemoveRole(false)\">Remove</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"user-form-create-button\">\r\n          <button @click=\"addOrUpdateUser\">\r\n            {{ updatedUser != null ? \"Update user\" : \"Create role\" }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { mapGetters } from \"vuex\";\r\nimport RoleHelper from \"../RoleHelper\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      telNumber: \"\",\r\n      password: \"\",\r\n      rolesText: \"\",\r\n      rolesToAddOrRemove: [],\r\n      roleToRemoveOrAddId: undefined,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters({\r\n      showUserAddForm: \"showUserAddForm\",\r\n      updatedUser: \"updatedUser\",\r\n      updatedUserIndex: \"updatedUserIndex\",\r\n      roles: \"roles\",\r\n    }),\r\n  },\r\n\r\n  methods: {\r\n    unShowAddUserForm() {\r\n      const userFormContainer = this.$refs.userFormContainer;\r\n\r\n      // Remove all classes from the element\r\n      userFormContainer.className = \"user-form-container-unshow\";\r\n\r\n      // After a delay of 1.25 seconds, toggle the Vuex state to false\r\n      setTimeout(() => {\r\n        this.$store.commit(\"toggleUserAddForm\", false);\r\n        this.$store.commit(\"setUpdatedUser\", null);\r\n        this.$store.commit(\"setUpdatedUserIndex\", null);\r\n      }, 1250);\r\n    },\r\n\r\n    // This asynchronous method is responsible for adding or updating a user's information.\r\n    async addOrUpdateUser() {\r\n      // Check for form validation errors by calling 'checkFormValues'.\r\n      const error = this.checkFormValues();\r\n\r\n      // If there are validation errors, return early without proceeding further.\r\n      if (error) {\r\n        return;\r\n      }\r\n\r\n      // If 'updatedUser' is not null, update an existing user.\r\n      if (this.updatedUser != null) {\r\n        // Prepare user data to send for updating an existing user.\r\n        const userDto = {\r\n          email: this.email,\r\n          roles: this.rolesToAddOrRemove,\r\n          last_name: this.lastName,\r\n          first_name: this.firstName,\r\n          tel_number: this.telNumber,\r\n          user_id: this.updatedUser.user_id,\r\n        };\r\n\r\n        // Send a POST request to the server to update the user's information using axios.\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/user/update-user\",\r\n          userDto,\r\n          {\r\n            withCredentials: true,\r\n          }\r\n        );\r\n\r\n        // Check if there is an error in the server response.\r\n        if (response.data.error) {\r\n          // Show a modal with the error message.\r\n          this.$store.commit(\"showModal\", response.data.error);\r\n          return;\r\n        }\r\n\r\n        // Show an informational popup indicating the user was updated.\r\n        this.$store.dispatch(\"openInfoPopUp\", \"User update\");\r\n\r\n        // If the user's roles have changed, fetch and update their rights.\r\n        if (response.data.isCurentChanged) {\r\n          const uniqueUserRighs = RoleHelper.fetchUserRights();\r\n\r\n          // Commit a Vuex mutation to set the user rights in the store.\r\n          this.$store.commit(\"setUserRights\", uniqueUserRighs);\r\n        }\r\n\r\n        // Dispatch an action to update the user in the store.\r\n        this.$store.dispatch(\"updateUser\", userDto);\r\n\r\n        // Call a method to hide the user creation/update form.\r\n        this.unShowAddUserForm();\r\n      } else {\r\n        // If 'updatedUser' is null, create a new user.\r\n\r\n        // Prepare user data to send for creating a new user.\r\n        const userDto = {\r\n          firstName: this.firstName,\r\n          lastName: this.lastName,\r\n          email: this.email,\r\n          telNumber: this.telNumber,\r\n          password: this.password,\r\n        };\r\n\r\n        try {\r\n          // Send a POST request to the server to create a new user using axios.\r\n          const response = await axios.post(\r\n            \"http://localhost:5000/user/user-create\",\r\n            userDto,\r\n            {\r\n              withCredentials: true,\r\n            }\r\n          );\r\n\r\n          // Check if there is an error in the server response.\r\n          if (response.data.error) {\r\n            // Show a modal with the error message.\r\n            this.$store.commit(\"showModal\", response.data.error);\r\n            return;\r\n          }\r\n\r\n          // Hide the user creation form.\r\n          this.unShowAddUserForm();\r\n\r\n          // Show an informational popup indicating the user was created.\r\n          this.$store.dispatch(\"openInfoPopUp\", \"User created\");\r\n\r\n          // Commit a Vuex mutation to add the new user to the store.\r\n          this.$store.commit(\"addUser\", response.data);\r\n        } catch (error) {\r\n          // Handle errors that occur during the user creation process.\r\n          console.log(error);\r\n\r\n          // Show a modal with a generic error message.\r\n          this.$store.commit(\r\n            \"showModal\",\r\n            \"Something went wrong we are working on the repair\"\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    // This function validates form values and shows an error modal if validation fails.\r\n    checkFormValues() {\r\n      // Regular expressions for email and telephone number validation.\r\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      const telPattern = /^\\d{10}$/;\r\n\r\n      let error = \"\";\r\n\r\n      // Check various conditions for form validation.\r\n      switch (true) {\r\n        case this.firstName.length === 0:\r\n        case this.lastName.length === 0:\r\n        case this.email.length === 0:\r\n        case this.telNumber.length === 0:\r\n        case this.password.length === 0 && this.updatedUser == null:\r\n          error = \"Please fill all fields in the form\";\r\n          break;\r\n\r\n        case !emailPattern.test(this.email):\r\n          error = \"Please enter a valid email address\";\r\n          break;\r\n\r\n        case !telPattern.test(this.telNumber):\r\n          error = \"Please enter a valid telephone number\";\r\n          break;\r\n\r\n        case this.password.length < 8 && this.updatedUser == null:\r\n          error = \"Password should be at least 8 characters long\";\r\n          break;\r\n      }\r\n\r\n      // If there's an error, show it in a modal and return true to indicate validation failure.\r\n      if (error) {\r\n        this.$store.commit(\"showModal\", error);\r\n        return true;\r\n      }\r\n    },\r\n\r\n    // This function sets the form fields with values from the 'updatedUser' object.\r\n    setUpdateUser() {\r\n      if (this.updatedUser != null) {\r\n        this.firstName = this.updatedUser.first_name;\r\n        this.lastName = this.updatedUser.last_name;\r\n        this.email = this.updatedUser.email;\r\n        this.telNumber = this.updatedUser.tel_number;\r\n        this.rolesToAddOrRemove = this.updatedUser.roles.map((role) => {\r\n          return role;\r\n        });\r\n\r\n        // If 'roles' is empty, fetch the roles using 'getRoles' action.\r\n        if (this.roles.length === 0) {\r\n          this.$store.dispatch(\"getRoles\");\r\n        }\r\n        // Set the text for selected roles.\r\n        this.setRoleText();\r\n      }\r\n    },\r\n\r\n    // This function sets the 'roleToRemoveOrAddId' variable for adding or removing roles.\r\n    setRoleToAddOrRemoveId(role) {\r\n      this.roleToRemoveOrAddId = role;\r\n    },\r\n\r\n    // This function adds or removes a role based on the 'add' parameter.\r\n    addOrRemoveRole(add) {\r\n      if (add) {\r\n        // Find the role to add based on 'roleToRemoveOrAddId'.\r\n        const roleToAdd = this.roles.filter((role) => {\r\n          return role.role_id === this.roleToRemoveOrAddId;\r\n        });\r\n\r\n        // Extract role IDs from 'rolesToAddOrRemove'.\r\n        const roleIds = this.rolesToAddOrRemove.map((role) => {\r\n          return role.role_id;\r\n        });\r\n\r\n        // Add the role if it's not already in 'rolesToAddOrRemove'.\r\n        if (!roleIds.includes(roleToAdd[0].role_id)) {\r\n          this.rolesToAddOrRemove.push({\r\n            displayName: roleToAdd[0].role_name,\r\n            role_id: roleToAdd[0].role_id,\r\n          });\r\n        }\r\n      } else {\r\n        // Remove the role from 'rolesToAddOrRemove' based on 'roleToRemoveOrAddId'.\r\n        this.rolesToAddOrRemove = this.rolesToAddOrRemove.filter((role) => {\r\n          return role.role_id !== this.roleToRemoveOrAddId;\r\n        });\r\n      }\r\n\r\n      // Update the text for selected roles.\r\n      this.setRoleText();\r\n    },\r\n\r\n    // This function sets the text representation of selected roles in 'rolesText'.\r\n    setRoleText() {\r\n      this.rolesText = \"\";\r\n\r\n      // Map selected roles to their display names and join them into a comma-separated string.\r\n      this.rolesText = this.rolesToAddOrRemove.map((role) => {\r\n        return role.displayName;\r\n      });\r\n\r\n      this.rolesText = this.rolesText.join(\", \");\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.setUpdateUser();\r\n  },\r\n\r\n  watch: {\r\n    updatedUser() {\r\n      this.setUpdateUser();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.user-form-container-show {\r\n  padding-top: 30px;\r\n  width: 400px;\r\n  height: 100vh;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: #2c3968;\r\n  i {\r\n    position: absolute;\r\n    color: whitesmoke;\r\n    top: 10px;\r\n    left: 10px;\r\n    font-size: 2rem;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n  }\r\n\r\n  animation: slideIn 1s ease-out forwards;\r\n}\r\n\r\n.user-form-container-unshow {\r\n  padding-top: 30px;\r\n  width: 400px;\r\n  height: 100vh;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: #2c3968;\r\n  i {\r\n    position: absolute;\r\n    color: whitesmoke;\r\n    top: 10px;\r\n    left: 10px;\r\n    font-size: 2rem;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n  }\r\n\r\n  animation: slideOut 1s ease-out forwards;\r\n}\r\n\r\n.user-form-header {\r\n  height: 50px;\r\n  text-align: center;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: whitesmoke;\r\n  letter-spacing: 2px;\r\n}\r\n\r\n.user-form-login-data-input-container {\r\n  width: 100%;\r\n  height: 800px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n\r\n  div {\r\n    height: 170px;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n\r\n    div {\r\n      display: flex;\r\n      flex-direction: row;\r\n      width: 80%;\r\n      height: 50px;\r\n\r\n      button {\r\n        width: 120px;\r\n        height: 25px;\r\n        background-color: whitesmoke;\r\n        border: none;\r\n        border-radius: 4px;\r\n        margin: 0 10px;\r\n        font-size: 1rem;\r\n        cursor: pointer;\r\n        transition: 0.2s;\r\n      }\r\n    }\r\n\r\n    input {\r\n      height: 30px;\r\n      width: 250px;\r\n      padding: 5px;\r\n      border-radius: 4px;\r\n      font-size: 14px;\r\n      outline: none;\r\n      transition: box-shadow 0.2s;\r\n    }\r\n\r\n    select {\r\n      height: 30px;\r\n      width: 250px;\r\n      padding: 5px;\r\n      border-radius: 4px;\r\n      font-size: 14px;\r\n      outline: none;\r\n      transition: box-shadow 0.2s;\r\n    }\r\n\r\n    input:focus {\r\n      box-shadow: 0 0 5px 3px rgba(50, 50, 93, 0.5),\r\n        0 0 8px 5px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    p {\r\n      font-size: 1.25rem;\r\n      text-align: center;\r\n      color: whitesmoke;\r\n      letter-spacing: 4px;\r\n    }\r\n  }\r\n}\r\n\r\n.user-form-create-button {\r\n  width: 100%;\r\n  height: 70px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n\r\n  button {\r\n    width: 200px;\r\n    height: 40px;\r\n    background-color: whitesmoke;\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 1.25rem;\r\n    cursor: pointer;\r\n    transition: 0.2s;\r\n  }\r\n\r\n  button:hover {\r\n    box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px,\r\n      rgba(0, 0, 0, 0.22) 0px 15px 12px;\r\n  }\r\n}\r\n\r\n@keyframes slideIn {\r\n  from {\r\n    transform: translateY(-100%);\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes slideOut {\r\n  from {\r\n    transform: translateY(0);\r\n  }\r\n  to {\r\n    transform: translateY(-100%);\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}