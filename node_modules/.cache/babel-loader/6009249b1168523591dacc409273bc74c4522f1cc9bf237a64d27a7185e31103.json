{"ast":null,"code":"import axios from \"axios\";\nimport store from \"@/store\";\nconst contactHelper = {\n  async createContact(contactType, contactToCreate, unShowForm) {\n    const isContactOk = checkContactFormValues(contactToCreate);\n    if (isContactOk) {\n      const response = await axios.post(\"http://localhost:5000/contact/create-contact\", contactToCreate, {\n        withCredentials: true\n      });\n      if (!response.data.error) {\n        unShowForm();\n        store.dispatch(\"openInfoPopUp\", ` ${capitalizeFirstLetter(contactType)} contact created`);\n        store.commit(\"setTotalCount\", response.data.count);\n        store.commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\n        store.dispatch(\"addContact\", contactToCreate);\n      } else {\n        store.dispatch(\"openInfoPopUp\", response.data.error);\n      }\n    } else {\n      store.commit(\"showModal\", \"Fill all fields correctly\");\n    }\n    return false;\n  },\n  getContactNameText(contact) {\n    if (contact === \"jobCandidate\") {\n      return \"Job candidate\";\n    } else {\n      return contact.charAt(0).toUpperCase() + contact.slice(1);\n    }\n  },\n  getContactIcon(contactType) {\n    if (contactType === \"person\") {\n      return \"person\";\n    } else {\n      return \"store\";\n    }\n  }\n};\nfunction isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\nfunction isValidPhoneNumber(phoneNumber) {\n  return /^\\d{7,}$/.test(phoneNumber);\n}\nfunction checkContactFormValues(contact) {\n  for (const property in contact) {\n    if (contact[property] == null || contact[property].length === 0) {\n      return false;\n    }\n    if (property === \"email\" && !isValidEmail(contact[property]) || property === \"contactEmail\" && !isValidEmail(contact[property]) || property === \"telNumber\" && !isValidPhoneNumber(contact[property])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction capitalizeFirstLetter(str) {\n  if (str === \"jobCandidate\") {\n    return \" Job Cadidate\";\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport default contactHelper;","map":{"version":3,"names":["axios","store","contactHelper","createContact","contactType","contactToCreate","unShowForm","isContactOk","checkContactFormValues","response","post","withCredentials","data","error","dispatch","capitalizeFirstLetter","commit","count","Math","ceil","getContactNameText","contact","charAt","toUpperCase","slice","getContactIcon","isValidEmail","email","emailRegex","test","isValidPhoneNumber","phoneNumber","property","length","str"],"sources":["C:/Users/Fidlo/Desktop/crm/crm-ui/src/Contacts-frontend/ContactHelper.js"],"sourcesContent":["import axios from \"axios\";\r\nimport store from \"@/store\";\r\nconst contactHelper = {\r\n  async createContact(contactType, contactToCreate, unShowForm) {\r\n    const isContactOk = checkContactFormValues(contactToCreate);\r\n    if (isContactOk) {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/contact/create-contact\",\r\n        contactToCreate,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      if (!response.data.error) {\r\n        unShowForm();\r\n\r\n        store.dispatch(\r\n          \"openInfoPopUp\",\r\n          ` ${capitalizeFirstLetter(contactType)} contact created`\r\n        );\r\n        store.commit(\"setTotalCount\", response.data.count);\r\n        store.commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\r\n\r\n        store.dispatch(\"addContact\", contactToCreate);\r\n      } else {\r\n        store.dispatch(\"openInfoPopUp\", response.data.error);\r\n      }\r\n    } else {\r\n      store.commit(\"showModal\", \"Fill all fields correctly\");\r\n    }\r\n    return false;\r\n  },\r\n\r\n  getContactNameText(contact) {\r\n    if (contact === \"jobCandidate\") {\r\n      return \"Job candidate\";\r\n    } else {\r\n      return contact.charAt(0).toUpperCase() + contact.slice(1);\r\n    }\r\n  },\r\n\r\n  getContactIcon(contactType) {\r\n    if (contactType === \"person\") {\r\n      return \"person\";\r\n    } else {\r\n      return \"store\";\r\n    }\r\n  },\r\n};\r\n\r\nfunction isValidEmail(email) {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\nfunction isValidPhoneNumber(phoneNumber) {\r\n  return /^\\d{7,}$/.test(phoneNumber);\r\n}\r\n\r\nfunction checkContactFormValues(contact) {\r\n  for (const property in contact) {\r\n    if (contact[property] == null || contact[property].length === 0) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      (property === \"email\" && !isValidEmail(contact[property])) ||\r\n      (property === \"contactEmail\" && !isValidEmail(contact[property])) ||\r\n      (property === \"telNumber\" && !isValidPhoneNumber(contact[property]))\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction capitalizeFirstLetter(str) {\r\n  if (str === \"jobCandidate\") {\r\n    return \" Job Cadidate\";\r\n  }\r\n\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nexport default contactHelper;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}