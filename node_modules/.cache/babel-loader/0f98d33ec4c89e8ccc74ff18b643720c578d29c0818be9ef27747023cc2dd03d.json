{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\nimport store from \"@/store\";\nVue.use(VueRouter);\nconst storedRoute = localStorage.getItem(\"path\");\nconst routes = [{\n  path: \"/Users\",\n  component: UsersDashboard\n}, {\n  path: \"/Roles\",\n  component: RolesDashboard\n}\n// Add a protected route that requires authentication\n];\n\nconst router = new VueRouter({\n  routes,\n  initialRoute: storedRoute || \"/\"\n});\n\n// Add a navigation guard to check if a route requires authentication\nrouter.beforeEach((to, from, next) => {\n  console.log(\"HELLO\");\n  const isAuthenticated = store.getters.isUserLogged;\n\n  // Check if the route requires authentication and the user is not authenticated\n  if (to.matched.some(record => record.meta.requiresAuth) && !isAuthenticated) {\n    // Redirect to the login page or another route that handles authentication\n    next(\"/login\"); // You can replace \"/login\" with your actual login route\n  } else {\n    next(); // Proceed to the route\n  }\n});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","UsersDashboard","RolesDashboard","store","use","storedRoute","localStorage","getItem","routes","path","component","router","initialRoute","beforeEach","to","from","next","console","log","isAuthenticated","getters","isUserLogged","matched","some","record","meta","requiresAuth"],"sources":["C:/Users/jdlou/OneDrive/Plocha/crmproject/crm-frontend/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\n\nimport store from \"@/store\";\n\nVue.use(VueRouter);\n\nconst storedRoute = localStorage.getItem(\"path\");\n\nconst routes = [\n  { path: \"/Users\", component: UsersDashboard },\n  { path: \"/Roles\", component: RolesDashboard },\n  // Add a protected route that requires authentication\n];\n\nconst router = new VueRouter({\n  routes,\n  initialRoute: storedRoute || \"/\",\n});\n\n// Add a navigation guard to check if a route requires authentication\nrouter.beforeEach((to, from, next) => {\n  console.log(\"HELLO\");\n\n  const isAuthenticated = store.getters.isUserLogged;\n\n  // Check if the route requires authentication and the user is not authenticated\n  if (\n    to.matched.some((record) => record.meta.requiresAuth) &&\n    !isAuthenticated\n  ) {\n    // Redirect to the login page or another route that handles authentication\n    next(\"/login\"); // You can replace \"/login\" with your actual login route\n  } else {\n    next(); // Proceed to the route\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,iDAAiD;AAC5E,OAAOC,cAAc,MAAM,iDAAiD;AAE5E,OAAOC,KAAK,MAAM,SAAS;AAE3BJ,GAAG,CAACK,GAAG,CAACJ,SAAS,CAAC;AAElB,MAAMK,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;AAEhD,MAAMC,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAET;AAAe,CAAC,EAC7C;EAAEQ,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAER;AAAe;AAC5C;AAAA,CACD;;AAED,MAAMS,MAAM,GAAG,IAAIX,SAAS,CAAC;EAC3BQ,MAAM;EACNI,YAAY,EAAEP,WAAW,IAAI;AAC/B,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpCC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EAEpB,MAAMC,eAAe,GAAGhB,KAAK,CAACiB,OAAO,CAACC,YAAY;;EAElD;EACA,IACEP,EAAE,CAACQ,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAACC,YAAY,CAAC,IACrD,CAACP,eAAe,EAChB;IACA;IACAH,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EAClB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;;AAEF,eAAeL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}