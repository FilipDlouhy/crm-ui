{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      telNumber: \"\",\n      password: \"\",\n      isLoggingIn: false\n    };\n  },\n  methods: {\n    // This asynchronous method registers a new user.\n    async registerUser() {\n      // Regular expressions for email and telephone number validation.\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      const telPattern = /^\\d{10}$/;\n      let error = \"\";\n\n      // Validate form input fields.\n      switch (true) {\n        case this.firstName.length === 0:\n        case this.lastName.length === 0:\n        case this.email.length === 0:\n        case this.telNumber.length === 0:\n        case this.password.length === 0:\n          error = \"Please fill all fields in the form\";\n          break;\n        case !emailPattern.test(this.email):\n          error = \"Please enter a valid email address\";\n          break;\n        case !telPattern.test(this.telNumber):\n          error = \"Please enter a valid telephone number\";\n          break;\n        case this.password.length < 8:\n          error = \"Password should be at least 8 characters long\";\n          break;\n      }\n\n      // If there's an error, show it in a modal and return.\n      if (error) {\n        this.$store.commit(\"showModal\", error);\n        return;\n      }\n\n      // Create a user data transfer object (DTO).\n      const userDto = {\n        firstName: this.firstName,\n        lastName: this.lastName,\n        email: this.email,\n        telNumber: this.telNumber,\n        password: this.password\n      };\n      try {\n        // Send a POST request to create a user with the provided data.\n        const response = await axios.post(\"http://localhost:5000/create-user-from-login\", userDto, {\n          withCredentials: true // Send cookies\n        });\n\n        // Handle any error returned from the server.\n        if (response.data.error) {\n          this.$store.commit(\"showModal\", response.data.error);\n        }\n\n        // Dispatch a Vuex action to open an information popup.\n        this.$store.dispatch(\"openInfoPopUp\", \"User created\");\n\n        // Set the user's login status.\n        this.setIsloggingIn();\n      } catch (error) {\n        // Handle network or server errors.\n        this.$store.commit(\"showModal\", \"Something went wrong; we are working on the repair\");\n      }\n    },\n    // This asynchronous method logs in a user.\n    async loginUser() {\n      try {\n        // Create a user data transfer object (DTO) with email and password.\n        const userDto = {\n          email: this.email,\n          password: this.password,\n          decode: true\n        };\n\n        // Validate form input fields.\n        if (this.email.length === 0 || this.password.length === 0) {\n          this.$store.commit(\"showModal\", \"Please fill all fields in the form\");\n          return;\n        }\n\n        // Send a POST request to log in the user.\n        const response = await axios.post(\"http://localhost:5000/login-from-login\", userDto, {\n          withCredentials: true\n        });\n\n        // Handle any error returned from the server.\n        if (response.data.error) {\n          this.$store.commit(\"showModal\", response.data.error);\n          return;\n        }\n\n        // Fetch user rights after successful login.\n        const rights = await axios.get(\"http://localhost:5000/get-user-rights\", {\n          withCredentials: true\n        });\n\n        // Handle any error while fetching user rights.\n        if (rights.data.error) {\n          this.$store.commit(\"showModal\", rights.data.error);\n          return;\n        }\n\n        // If login is successful, set the user's login state and rights in the Vuex store.\n        if (!response.data.error) {\n          const userRights = rights.data.rights.map(roleRight => {\n            return roleRight.rights.map(right => {\n              return right.name;\n            });\n          });\n\n          // Flatten the array and remove duplicates using a Set.\n          const uniqueUserRights = [...new Set(userRights.flat())];\n          this.$store.dispatch(\"setIsUserLogged\", true);\n          this.$store.commit(\"setUserRights\", uniqueUserRights);\n        }\n      } catch (error) {\n        // Handle network or server errors.\n        this.$store.commit(\"showModal\", \"Something went wrong; we are working on the repair\");\n      }\n    },\n    setIsloggingIn() {\n      this.isLoggingIn = !this.isLoggingIn;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","firstName","lastName","email","telNumber","password","isLoggingIn","methods","registerUser","emailPattern","telPattern","error","length","test","$store","commit","userDto","response","post","withCredentials","dispatch","setIsloggingIn","loginUser","decode","rights","get","userRights","map","roleRight","right","name","uniqueUserRights","Set","flat"],"sources":["src/Dashboard/Components/LoginForm/LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-form\">\r\n    <div class=\"dashboard-form-header\">\r\n      <h1>Sing up into TechTrack CRM</h1>\r\n      <h2 @click=\"setIsloggingIn\">Or are you already registered</h2>\r\n    </div>\r\n    <div class=\"dashboard-form-login-data\">\r\n      <div class=\"dashboard-form-login-data-input-container\">\r\n        <input\r\n          v-if=\"!isLoggingIn\"\r\n          v-model=\"firstName\"\r\n          type=\"text\"\r\n          placeholder=\"First name\"\r\n        />\r\n        <input\r\n          v-if=\"!isLoggingIn\"\r\n          v-model=\"lastName\"\r\n          type=\"text\"\r\n          placeholder=\"Last name\"\r\n        />\r\n        <input v-model=\"email\" type=\"text\" placeholder=\"Email\" />\r\n        <input\r\n          v-if=\"!isLoggingIn\"\r\n          v-model=\"telNumber\"\r\n          type=\"tel\"\r\n          placeholder=\"Telephone\"\r\n        />\r\n        <input v-model=\"password\" type=\"password\" placeholder=\"Password\" />\r\n      </div>\r\n\r\n      <div>\r\n        <button v-if=\"!isLoggingIn\" @click=\"registerUser\">Sign up</button>\r\n        <button v-else @click=\"loginUser\">Login</button>\r\n        <button>Try as a guest</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      telNumber: \"\",\r\n      password: \"\",\r\n      isLoggingIn: false,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    // This asynchronous method registers a new user.\r\n    async registerUser() {\r\n      // Regular expressions for email and telephone number validation.\r\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      const telPattern = /^\\d{10}$/;\r\n\r\n      let error = \"\";\r\n\r\n      // Validate form input fields.\r\n      switch (true) {\r\n        case this.firstName.length === 0:\r\n        case this.lastName.length === 0:\r\n        case this.email.length === 0:\r\n        case this.telNumber.length === 0:\r\n        case this.password.length === 0:\r\n          error = \"Please fill all fields in the form\";\r\n          break;\r\n\r\n        case !emailPattern.test(this.email):\r\n          error = \"Please enter a valid email address\";\r\n          break;\r\n\r\n        case !telPattern.test(this.telNumber):\r\n          error = \"Please enter a valid telephone number\";\r\n          break;\r\n\r\n        case this.password.length < 8:\r\n          error = \"Password should be at least 8 characters long\";\r\n          break;\r\n      }\r\n\r\n      // If there's an error, show it in a modal and return.\r\n      if (error) {\r\n        this.$store.commit(\"showModal\", error);\r\n        return;\r\n      }\r\n\r\n      // Create a user data transfer object (DTO).\r\n      const userDto = {\r\n        firstName: this.firstName,\r\n        lastName: this.lastName,\r\n        email: this.email,\r\n        telNumber: this.telNumber,\r\n        password: this.password,\r\n      };\r\n\r\n      try {\r\n        // Send a POST request to create a user with the provided data.\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/create-user-from-login\",\r\n          userDto,\r\n          {\r\n            withCredentials: true, // Send cookies\r\n          }\r\n        );\r\n\r\n        // Handle any error returned from the server.\r\n        if (response.data.error) {\r\n          this.$store.commit(\"showModal\", response.data.error);\r\n        }\r\n\r\n        // Dispatch a Vuex action to open an information popup.\r\n        this.$store.dispatch(\"openInfoPopUp\", \"User created\");\r\n\r\n        // Set the user's login status.\r\n        this.setIsloggingIn();\r\n      } catch (error) {\r\n        // Handle network or server errors.\r\n        this.$store.commit(\r\n          \"showModal\",\r\n          \"Something went wrong; we are working on the repair\"\r\n        );\r\n      }\r\n    },\r\n\r\n    // This asynchronous method logs in a user.\r\n    async loginUser() {\r\n      try {\r\n        // Create a user data transfer object (DTO) with email and password.\r\n        const userDto = {\r\n          email: this.email,\r\n          password: this.password,\r\n          decode: true,\r\n        };\r\n\r\n        // Validate form input fields.\r\n        if (this.email.length === 0 || this.password.length === 0) {\r\n          this.$store.commit(\"showModal\", \"Please fill all fields in the form\");\r\n          return;\r\n        }\r\n\r\n        // Send a POST request to log in the user.\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/login-from-login\",\r\n          userDto,\r\n          {\r\n            withCredentials: true,\r\n          }\r\n        );\r\n\r\n        // Handle any error returned from the server.\r\n        if (response.data.error) {\r\n          this.$store.commit(\"showModal\", response.data.error);\r\n          return;\r\n        }\r\n\r\n        // Fetch user rights after successful login.\r\n        const rights = await axios.get(\r\n          \"http://localhost:5000/get-user-rights\",\r\n          {\r\n            withCredentials: true,\r\n          }\r\n        );\r\n\r\n        // Handle any error while fetching user rights.\r\n        if (rights.data.error) {\r\n          this.$store.commit(\"showModal\", rights.data.error);\r\n          return;\r\n        }\r\n\r\n        // If login is successful, set the user's login state and rights in the Vuex store.\r\n        if (!response.data.error) {\r\n          const userRights = rights.data.rights.map((roleRight) => {\r\n            return roleRight.rights.map((right) => {\r\n              return right.name;\r\n            });\r\n          });\r\n\r\n          // Flatten the array and remove duplicates using a Set.\r\n          const uniqueUserRights = [...new Set(userRights.flat())];\r\n          this.$store.dispatch(\"setIsUserLogged\", true);\r\n          this.$store.commit(\"setUserRights\", uniqueUserRights);\r\n        }\r\n      } catch (error) {\r\n        // Handle network or server errors.\r\n        this.$store.commit(\r\n          \"showModal\",\r\n          \"Something went wrong; we are working on the repair\"\r\n        );\r\n      }\r\n    },\r\n\r\n    setIsloggingIn() {\r\n      this.isLoggingIn = !this.isLoggingIn;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dashboard-form {\r\n  width: 40%;\r\n  height: 70%;\r\n  background: white;\r\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.dashboard-form-header {\r\n  width: 100%;\r\n  height: 20%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  flex-direction: column;\r\n  color: radial-gradient(\r\n    circle at 10% 20%,\r\n    #1e3b5a 0%,\r\n    // Deep blue\r\n    #0e1e2e 100.2% // Darker deep blue\r\n  );\r\n\r\n  h2 {\r\n    font-size: 1.2rem;\r\n    color: rgba(128, 128, 128, 0.61);\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    &:hover {\r\n      color: rgb(1, 45, 58);\r\n    }\r\n  }\r\n}\r\n\r\n.dashboard-form-login-data {\r\n  width: 100%;\r\n  height: 80%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  flex-direction: column;\r\n  button {\r\n    width: 250px;\r\n    height: 40px;\r\n    background-color: #2fd37e;\r\n    outline: none;\r\n    border: none;\r\n    color: white;\r\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\r\n    font-size: 1.25rem;\r\n    font-weight: 500;\r\n    letter-spacing: 1px;\r\n    margin: 0 10px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n.dashboard-form-login-data-input-container {\r\n  width: 100%;\r\n  height: 80%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  flex-direction: column;\r\n  input {\r\n    width: 300px;\r\n    height: 30px;\r\n    text-align: center;\r\n    border-right: none;\r\n    border-left: none;\r\n    border-top: none;\r\n    border-bottom-color: rgb(199, 199, 199);\r\n  }\r\n  input:focus {\r\n    border-right: none;\r\n    border-left: none;\r\n    border-top: none;\r\n    outline: none;\r\n    border-bottom-color: rgb(10, 176, 227);\r\n  }\r\n  input:focus::placeholder {\r\n    transform: translateY(-120%); /* Move the placeholder text up */\r\n    color: rgb(10, 176, 227); /* Change placeholder color when focused */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}