{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data() {\n    return {\n      roleName: \"\",\n      rights: [],\n      rightsToUpdate: [],\n      userServiceRights: [{\n        id: \"addRemoveRole\",\n        name: \"Add/Remove role\",\n        checked: false\n      }, {\n        id: \"createDeleteRole\",\n        name: \"Create/Delete role\",\n        checked: false\n      }, {\n        id: \"changeUserState\",\n        name: \"Change user state\",\n        checked: false\n      }, {\n        id: \"seeUsers\",\n        name: \"See users\",\n        checked: false\n      }, {\n        id: \"seeUserService\",\n        name: \"See user service\",\n        checked: false\n      }, {\n        id: \"seeRoles\",\n        name: \"See roles\",\n        checked: false\n      }, {\n        id: \"updateRole\",\n        name: \"Update role\",\n        checked: false\n      }, {\n        id: \"updateUser\",\n        name: \"Update user\",\n        checked: false\n      }]\n    };\n  },\n  computed: {\n    ...mapGetters({\n      showRoleForm: \"showRoleForm\",\n      roleToUpdate: \"roleToUpdate\",\n      roleToUpdateIndex: \"roleToUpdateIndex\"\n    })\n  },\n  methods: {\n    unShowAddroleForm() {\n      const roleFormContainer = this.$refs.roleFormContainer;\n      this.$store.commit(\"setRoleToUpdate\", null);\n\n      // Remove all classes from the element\n      roleFormContainer.className = \"role-form-container-unshow\";\n\n      // After a delay of 1.25 seconds, toggle the Vuex state to false\n      setTimeout(() => {\n        this.$store.dispatch(\"toggleRoleForm\", false);\n      }, 1250);\n    },\n    // This function is used to add or remove rights to/from an array based on a checkbox event.\n    addOrRemoveRight(event) {\n      // Determine the rights array to modify based on whether 'roleToUpdate' is null.\n      let rightsArray = this.roleToUpdate == null ? this.rights : this.rightsToUpdate;\n\n      // If the checkbox is checked (event.target.checked === true), add a new right object to the array.\n      if (event.target.checked === true) {\n        rightsArray.push({\n          displayName: event.target.name,\n          name: event.target.id\n        });\n      } else {\n        // If the checkbox is unchecked, filter out the right with the matching 'id' from the array.\n        rightsArray = rightsArray.filter(right => right.name !== event.target.id);\n      }\n\n      // Update the original rights array or rightsToUpdate array based on 'roleToUpdate' value.\n      if (this.roleToUpdate == null) {\n        this.rights = rightsArray; // Update the 'rights' array if 'roleToUpdate' is null.\n      } else {\n        this.rightsToUpdate = rightsArray; // Update the 'rightsToUpdate' array if 'roleToUpdate' is not null.\n      }\n    },\n\n    // This asynchronous function is responsible for creating a role and sending a POST request to the server.\n    async createRole() {\n      // Check if there are no selected rights and show a modal message if none are selected.\n      if (this.rights.length === 0) {\n        this.$store.commit(\"showModal\", \"Select at least one right\");\n        return;\n      }\n\n      // Check if the role name is empty and show a modal message if it is.\n      if (this.roleName.length === 0) {\n        this.$store.commit(\"showModal\", \"Name the role\");\n        return;\n      }\n\n      // Prepare a data object ('roleDto') containing selected rights and the role name.\n      const roleDto = {\n        rights: this.rights,\n        roleName: this.roleName\n      };\n\n      // Send a POST request to the server to create the role using axios.\n      const response = await axios.post(\"http://localhost:5000/user/role/role-create\", roleDto, {\n        withCredentials: true\n      });\n\n      // Check if the server response contains an error message and show it in a modal if present.\n      if (response.data.error) {\n        this.$store.commit(\"showModal\", response.data.error);\n        return;\n      }\n\n      // Show an informational popup indicating the successful creation of the role.\n      this.$store.dispatch(\"openInfoPopUp\", \"Role created\");\n\n      // Dispatch an action to add the created role to the store's data.\n      this.$store.dispatch(\"addRole\", response.data);\n\n      // Call a method ('unShowAddroleForm') to hide the role creation form.\n      this.unShowAddroleForm();\n    },\n    // This asynchronous function is responsible for updating a role and sending a POST request to the server for the update.\n    async updateRole() {\n      // Send a POST request to the server to update the role using axios.\n      const response = await axios.post(\"http://localhost:5000/user/role/update-role\", {\n        role_name: this.roleName,\n        rights: this.rightsToUpdate,\n        role_id: this.roleToUpdate.role_id\n      }, {\n        withCredentials: true\n      });\n\n      // Check if the server response contains an error message and show it in a modal if present.\n      if (response.data.error) {\n        this.$store.commit(\"showModal\", response.data.error);\n        return;\n      }\n\n      // Show an informational popup indicating the successful update of the role.\n      this.$store.dispatch(\"openInfoPopUp\", \"Role updated\");\n\n      // Dispatch an action to update the role data in the store.\n      this.$store.dispatch(\"updateOneRole\", {\n        roleToUpdate: {\n          role_name: this.roleName,\n          rights: this.rightsToUpdate\n        },\n        indexOfTheRole: this.roleToUpdateIndex\n      });\n\n      // Dispatch an action to update user rights (assuming this is necessary for your application).\n      this.$store.dispatch(\"updateUserRights\");\n\n      // Call a method ('unShowAddroleForm') to hide the role update form.\n      this.unShowAddroleForm();\n    },\n    // This method updates the role data and rights based on the 'roleToUpdate' property.\n    // The 'watch' parameter is used to control whether to update 'right.checked' when it's false.\n    updateRoleData(watch) {\n      // Check if 'roleToUpdate' is not null.\n      if (this.roleToUpdate != null) {\n        // Update the 'roleName' with the name from 'roleToUpdate'.\n        this.roleName = this.roleToUpdate.role_name;\n\n        // Extract the names of rights associated with 'roleToUpdate'.\n        const roleRights = this.roleToUpdate.rights.map(right => right.name);\n\n        // Iterate through 'userServiceRights'.\n        this.userServiceRights.forEach(right => {\n          // Check if 'roleRights' includes the 'id' of the current 'right'.\n          if (roleRights.includes(right.id)) {\n            // If included, set 'right.checked' to true and add it to 'rightsToUpdate'.\n            right.checked = true;\n            this.rightsToUpdate.push({\n              displayName: right.name,\n              name: right.id\n            });\n          } else {\n            // If not included and 'watch' is true, set 'right.checked' to false.\n            if (watch) {\n              right.checked = false;\n            }\n          }\n        });\n      }\n    }\n  },\n  mounted() {\n    this.updateRoleData(false);\n  },\n  watch: {\n    roleToUpdate() {\n      this.updateRoleData(true);\n    }\n  }\n};","map":{"version":3,"names":["axios","mapGetters","data","roleName","rights","rightsToUpdate","userServiceRights","id","name","checked","computed","showRoleForm","roleToUpdate","roleToUpdateIndex","methods","unShowAddroleForm","roleFormContainer","$refs","$store","commit","className","setTimeout","dispatch","addOrRemoveRight","event","rightsArray","target","push","displayName","filter","right","createRole","length","roleDto","response","post","withCredentials","error","updateRole","role_name","role_id","indexOfTheRole","updateRoleData","watch","roleRights","map","forEach","includes","mounted"],"sources":["src/Users-Frontend/Components/AddOrUpdateRoleForm.vue"],"sourcesContent":["<template>\r\n  <div\r\n    ref=\"roleFormContainer\"\r\n    :class=\"\r\n      showRoleForm ? 'role-form-container-show' : 'role-form-container-unshow'\r\n    \"\r\n  >\r\n    <div class=\"role-form\">\r\n      <i @click=\"unShowAddroleForm\" class=\"material-icons\"> login </i>\r\n      <div class=\"role-form-header\">\r\n        <h1>Create role</h1>\r\n      </div>\r\n      <div>\r\n        <div class=\"role-form-login-data-input-container\">\r\n          <div class=\"role-form-text-div\">\r\n            <p>Role name</p>\r\n            <input v-model=\"roleName\" type=\"role_name\" />\r\n          </div>\r\n\r\n          <div class=\"role-rights-container\">\r\n            <select>\r\n              <option value=\"users\">Users</option>\r\n            </select>\r\n\r\n            <div class=\"check-box-container\">\r\n              <div v-for=\"checkbox in userServiceRights\" :key=\"checkbox.id\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  :id=\"checkbox.id\"\r\n                  :name=\"checkbox.name\"\r\n                  v-model=\"checkbox.checked\"\r\n                  @change=\"addOrRemoveRight\"\r\n                />\r\n                <p>{{ checkbox.name }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"role-form-create-button\">\r\n          <button v-if=\"roleToUpdate == null\" @click=\"createRole\">\r\n            Create role\r\n          </button>\r\n          <button v-else @click=\"updateRole\">Update role</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { mapGetters } from \"vuex\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      roleName: \"\",\r\n      rights: [],\r\n      rightsToUpdate: [],\r\n\r\n      userServiceRights: [\r\n        {\r\n          id: \"addRemoveRole\",\r\n          name: \"Add/Remove role\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: \"createDeleteRole\",\r\n          name: \"Create/Delete role\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: \"changeUserState\",\r\n          name: \"Change user state\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: \"seeUsers\",\r\n          name: \"See users\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: \"seeUserService\",\r\n          name: \"See user service\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: \"seeRoles\",\r\n          name: \"See roles\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: \"updateRole\",\r\n          name: \"Update role\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: \"updateUser\",\r\n          name: \"Update user\",\r\n          checked: false,\r\n        },\r\n      ],\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters({\r\n      showRoleForm: \"showRoleForm\",\r\n      roleToUpdate: \"roleToUpdate\",\r\n      roleToUpdateIndex: \"roleToUpdateIndex\",\r\n    }),\r\n  },\r\n\r\n  methods: {\r\n    unShowAddroleForm() {\r\n      const roleFormContainer = this.$refs.roleFormContainer;\r\n      this.$store.commit(\"setRoleToUpdate\", null);\r\n\r\n      // Remove all classes from the element\r\n      roleFormContainer.className = \"role-form-container-unshow\";\r\n\r\n      // After a delay of 1.25 seconds, toggle the Vuex state to false\r\n      setTimeout(() => {\r\n        this.$store.dispatch(\"toggleRoleForm\", false);\r\n      }, 1250);\r\n    },\r\n\r\n    // This function is used to add or remove rights to/from an array based on a checkbox event.\r\n    addOrRemoveRight(event) {\r\n      // Determine the rights array to modify based on whether 'roleToUpdate' is null.\r\n      let rightsArray =\r\n        this.roleToUpdate == null ? this.rights : this.rightsToUpdate;\r\n\r\n      // If the checkbox is checked (event.target.checked === true), add a new right object to the array.\r\n      if (event.target.checked === true) {\r\n        rightsArray.push({\r\n          displayName: event.target.name,\r\n          name: event.target.id,\r\n        });\r\n      } else {\r\n        // If the checkbox is unchecked, filter out the right with the matching 'id' from the array.\r\n        rightsArray = rightsArray.filter(\r\n          (right) => right.name !== event.target.id\r\n        );\r\n      }\r\n\r\n      // Update the original rights array or rightsToUpdate array based on 'roleToUpdate' value.\r\n      if (this.roleToUpdate == null) {\r\n        this.rights = rightsArray; // Update the 'rights' array if 'roleToUpdate' is null.\r\n      } else {\r\n        this.rightsToUpdate = rightsArray; // Update the 'rightsToUpdate' array if 'roleToUpdate' is not null.\r\n      }\r\n    },\r\n\r\n    // This asynchronous function is responsible for creating a role and sending a POST request to the server.\r\n    async createRole() {\r\n      // Check if there are no selected rights and show a modal message if none are selected.\r\n      if (this.rights.length === 0) {\r\n        this.$store.commit(\"showModal\", \"Select at least one right\");\r\n        return;\r\n      }\r\n\r\n      // Check if the role name is empty and show a modal message if it is.\r\n      if (this.roleName.length === 0) {\r\n        this.$store.commit(\"showModal\", \"Name the role\");\r\n        return;\r\n      }\r\n\r\n      // Prepare a data object ('roleDto') containing selected rights and the role name.\r\n      const roleDto = {\r\n        rights: this.rights,\r\n        roleName: this.roleName,\r\n      };\r\n\r\n      // Send a POST request to the server to create the role using axios.\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/user/role/role-create\",\r\n        roleDto,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      // Check if the server response contains an error message and show it in a modal if present.\r\n      if (response.data.error) {\r\n        this.$store.commit(\"showModal\", response.data.error);\r\n        return;\r\n      }\r\n\r\n      // Show an informational popup indicating the successful creation of the role.\r\n      this.$store.dispatch(\"openInfoPopUp\", \"Role created\");\r\n\r\n      // Dispatch an action to add the created role to the store's data.\r\n      this.$store.dispatch(\"addRole\", response.data);\r\n\r\n      // Call a method ('unShowAddroleForm') to hide the role creation form.\r\n      this.unShowAddroleForm();\r\n    },\r\n\r\n    // This asynchronous function is responsible for updating a role and sending a POST request to the server for the update.\r\n    async updateRole() {\r\n      // Send a POST request to the server to update the role using axios.\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/user/role/update-role\",\r\n        {\r\n          role_name: this.roleName,\r\n          rights: this.rightsToUpdate,\r\n          role_id: this.roleToUpdate.role_id,\r\n        },\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      // Check if the server response contains an error message and show it in a modal if present.\r\n      if (response.data.error) {\r\n        this.$store.commit(\"showModal\", response.data.error);\r\n        return;\r\n      }\r\n\r\n      // Show an informational popup indicating the successful update of the role.\r\n      this.$store.dispatch(\"openInfoPopUp\", \"Role updated\");\r\n\r\n      // Dispatch an action to update the role data in the store.\r\n      this.$store.dispatch(\"updateOneRole\", {\r\n        roleToUpdate: { role_name: this.roleName, rights: this.rightsToUpdate },\r\n        indexOfTheRole: this.roleToUpdateIndex,\r\n      });\r\n\r\n      // Dispatch an action to update user rights (assuming this is necessary for your application).\r\n      this.$store.dispatch(\"updateUserRights\");\r\n\r\n      // Call a method ('unShowAddroleForm') to hide the role update form.\r\n      this.unShowAddroleForm();\r\n    },\r\n\r\n    // This method updates the role data and rights based on the 'roleToUpdate' property.\r\n    // The 'watch' parameter is used to control whether to update 'right.checked' when it's false.\r\n    updateRoleData(watch) {\r\n      // Check if 'roleToUpdate' is not null.\r\n      if (this.roleToUpdate != null) {\r\n        // Update the 'roleName' with the name from 'roleToUpdate'.\r\n        this.roleName = this.roleToUpdate.role_name;\r\n\r\n        // Extract the names of rights associated with 'roleToUpdate'.\r\n        const roleRights = this.roleToUpdate.rights.map((right) => right.name);\r\n\r\n        // Iterate through 'userServiceRights'.\r\n        this.userServiceRights.forEach((right) => {\r\n          // Check if 'roleRights' includes the 'id' of the current 'right'.\r\n          if (roleRights.includes(right.id)) {\r\n            // If included, set 'right.checked' to true and add it to 'rightsToUpdate'.\r\n            right.checked = true;\r\n            this.rightsToUpdate.push({\r\n              displayName: right.name,\r\n              name: right.id,\r\n            });\r\n          } else {\r\n            // If not included and 'watch' is true, set 'right.checked' to false.\r\n            if (watch) {\r\n              right.checked = false;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.updateRoleData(false);\r\n  },\r\n\r\n  watch: {\r\n    roleToUpdate() {\r\n      this.updateRoleData(true);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.role-form-container-show {\r\n  padding-top: 30px;\r\n  width: 400px;\r\n  height: 100vh;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: #2c3968;\r\n  i {\r\n    position: absolute;\r\n    color: whitesmoke;\r\n    top: 10px;\r\n    left: 10px;\r\n    font-size: 2rem;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n  }\r\n\r\n  animation: slideIn 1s ease-out forwards;\r\n}\r\n\r\n.role-form-container-unshow {\r\n  padding-top: 30px;\r\n  width: 400px;\r\n  height: 100vh;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: #2c3968;\r\n  i {\r\n    position: absolute;\r\n    color: whitesmoke;\r\n    top: 10px;\r\n    left: 10px;\r\n    font-size: 2rem;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n  }\r\n\r\n  animation: slideOut 1s ease-out forwards;\r\n}\r\n\r\n.role-form-header {\r\n  height: 50px;\r\n  text-align: center;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: whitesmoke;\r\n  letter-spacing: 2px;\r\n}\r\n\r\n.role-form-login-data-input-container {\r\n  width: 100%;\r\n  height: 625px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.role-form-text-div {\r\n  height: 125px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n\r\n  input {\r\n    height: 30px;\r\n    width: 250px;\r\n    padding: 5px;\r\n    border-radius: 4px;\r\n    font-size: 14px;\r\n    outline: none;\r\n    transition: box-shadow 0.2s;\r\n  }\r\n\r\n  input:focus {\r\n    box-shadow: 0 0 5px 3px rgba(50, 50, 93, 0.5),\r\n      0 0 8px 5px rgba(0, 0, 0, 0.3);\r\n  }\r\n\r\n  p {\r\n    font-size: 1.25rem;\r\n    color: whitesmoke;\r\n    letter-spacing: 4px;\r\n  }\r\n}\r\n\r\n.role-form-create-button {\r\n  width: 100%;\r\n  height: 200px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n\r\n  button {\r\n    width: 200px;\r\n    height: 40px;\r\n    background-color: whitesmoke;\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 1.25rem;\r\n    cursor: pointer;\r\n    transition: 0.2s;\r\n  }\r\n\r\n  button:hover {\r\n    box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px,\r\n      rgba(0, 0, 0, 0.22) 0px 15px 12px;\r\n  }\r\n}\r\n\r\n.role-rights-container {\r\n  width: 100%;\r\n  height: 600px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  flex-direction: column;\r\n\r\n  select {\r\n    height: 30px;\r\n    width: 250px;\r\n    padding: 5px;\r\n    border-radius: 4px;\r\n    font-size: 14px;\r\n    outline: none;\r\n    transition: box-shadow 0.2s;\r\n  }\r\n}\r\n.check-box-container {\r\n  height: 400px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  flex-direction: column;\r\n\r\n  div {\r\n    height: 30px;\r\n    width: 250px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    input {\r\n      width: 17.5px;\r\n      height: 17.5px;\r\n      margin-right: 10px;\r\n    }\r\n\r\n    p {\r\n      font-size: 1.25rem;\r\n      color: whitesmoke;\r\n      padding-bottom: 5px;\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes slideIn {\r\n  from {\r\n    transform: translateY(-100%);\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes slideOut {\r\n  from {\r\n    transform: translateY(0);\r\n  }\r\n  to {\r\n    transform: translateY(-100%);\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}