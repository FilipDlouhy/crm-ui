{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TableView from \"../../Dashboard/Components/Core/TableView.vue\";\nimport TableViewFooter from \"../../Dashboard/Components/Core/TableViewFooter.vue\";\nimport { mapGetters } from \"vuex\";\nimport AddContactForm from \"./AddContactForm.vue\";\nimport contactHelper from \"../ContactHelper\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      contactTableRows: [],\n      filterValue: \"\",\n      selectedIndex: 0,\n      filterName: \"\",\n      chosenFormText: \"\",\n      personOrOrganizationValue: \"\",\n      unShowFormFunction: undefined\n    };\n  },\n  components: {\n    TableView,\n    TableViewFooter,\n    AddContactForm\n  },\n  computed: {\n    filterableContactTableRows() {\n      return this.contactTableRows.filter(row => row.filterable);\n    },\n    ...mapGetters({\n      currentContactForm: \"currentContactForm\",\n      contacts: \"contacts\",\n      contactsToChange: \"contactsToChange\",\n      contactFilters: \"contactFilters\",\n      contactFiltersSort: \"contactFiltersSort\",\n      totalCount: \"totalCount\",\n      contactFirstPage: \"contactFirstPage\",\n      contactLastPage: \"contactLastPage\",\n      typeOfContactToShow: \"typeOfContactToShow\"\n    })\n  },\n  methods: {\n    rejectWorkerOrJobCandidate() {\n      if (this.contactsToChange.length === 0) {\n        return;\n      }\n      axios.post(\"http://localhost:5000/contact/contact-fire\", this.contactsToChange, {\n        withCredentials: true\n      });\n    },\n    customerAddFormOpen() {\n      this.$store.dispatch(\"updateCurrentContactForm\", this.typeOfContactToShow);\n    },\n    setValuesToChange(valuesToChange) {\n      this.$store.commit(\"setConstactsToChange\", valuesToChange);\n    },\n    removeContacts(message) {\n      if (this.contactsToChange.length === 0) {\n        return 0;\n      }\n      this.$store.commit(\"showDoYouWantToModal\", message);\n      this.$store.dispatch(\"setDoYouWantToModalFunction\", \"deleteContacts\");\n    },\n    addFilterPersonOrOrganization(event) {\n      this.$store.dispatch(\"addFilterstToContact\", {\n        filterName: \"organization_or_person\",\n        filterValue: event.target.value\n      });\n      this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n    },\n    addFilter() {\n      if (this.filterName.length === 0 || this.filterValue.length === 0) {\n        return;\n      }\n      this.$store.dispatch(\"addFilterstToContact\", {\n        filterName: this.filterName,\n        filterValue: this.filterValue\n      });\n      this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n      this.filterValue = \"\";\n    },\n    removeFilter(collumName) {\n      this.$store.dispatch(\"removeFilterContacts\", collumName);\n      this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n    },\n    async addFilterSort(collumName, ascending) {\n      await this.$store.dispatch(\"addFilterSortForContacts\", {\n        filterName: collumName,\n        ascending: ascending\n      });\n      await this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n    },\n    async removeFilterSort(collumName) {\n      await this.$store.dispatch(\"removeFilterSortForContacts\", collumName);\n      await this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n    },\n    addPage() {\n      if (this.contactFirstPage + 1 > this.contactLastPage) {\n        return;\n      }\n      this.$store.commit(\"setContactFirstPage\", this.contactFirstPage + 1);\n      if (this.contactFilters.length > 0 || this.contactFiltersSort.length > 0) {\n        this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n      } else {\n        this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\n      }\n    },\n    removePage() {\n      if (this.contactFirstPage - 1 < 1) {\n        return;\n      }\n      this.$store.commit(\"setContactFirstPage\", this.contactFirstPage - 1);\n      if (this.contactFilters.length > 0 || this.contactFiltersSort.length > 0) {\n        this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n      } else {\n        this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\n      }\n    },\n    getContactText() {\n      return contactHelper.getContactNameText(this.typeOfContactToShow);\n    },\n    goToContactPage(contact) {\n      this.$store.commit(\"setContactToUpdate\", contact);\n      this.$router.push(\"/Contacts/ContactPage\");\n    },\n    populateContactTableRows() {\n      this.contactTableRows = [{\n        displayText: \"First name\",\n        value: \"first_name\",\n        sortable: true,\n        filterable: true\n      }, {\n        displayText: \"Last name\",\n        value: \"last_name\",\n        sortable: true,\n        filterable: true\n      }, {\n        displayText: \"Created\",\n        value: \"created_at\",\n        sortable: true\n      }, {\n        displayText: \"Address\",\n        value: \"address\",\n        sortable: true,\n        filterable: true\n      }, {\n        displayText: \"Telephone\",\n        value: \"tel_number\",\n        sortable: true,\n        filterable: true\n      }, {\n        displayText: \"Contact email\",\n        value: \"email\",\n        sortable: true,\n        filterable: true\n      }];\n      switch (this.typeOfContactToShow) {\n        case \"vendor\":\n        case \"customer\":\n          this.contactTableRows.push({\n            displayText: \"Organization name\",\n            value: \"organization_name\",\n            bigger: true,\n            sortable: true\n          }, {\n            displayText: \"Organization/Person\",\n            value: \"organization_or_person\",\n            bigger: true,\n            sortable: true,\n            filterable: true\n          });\n          break;\n        case \"jobCandidate\":\n          this.contactTableRows.push({\n            displayText: \"Worker role\",\n            value: \"worker_role\"\n          }, {\n            displayText: \"Hired\",\n            value: \"hired\",\n            sortable: true\n          });\n          break;\n        case \"worker\":\n          this.contactTableRows.push({\n            displayText: \"Seniority\",\n            value: \"seniority\"\n          }, {\n            displayText: \"Worker role\",\n            value: \"worker_role\"\n          }, {\n            displayText: \"Hired\",\n            value: \"hired\",\n            sortable: true\n          });\n          break;\n      }\n    }\n  },\n  async mounted() {\n    this.populateContactTableRows();\n    if (this.typeOfContactToShow.length === 0) {\n      this.$store.commit(\"setTypeOfContactToShow\", localStorage.getItem(\"activeSubMenu\").slice(0, -1));\n    }\n    await this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\n  },\n  watch: {\n    contactFilters() {\n      const containsOrganizationOrPersonFilter = this.contactFilters.some(filter => filter.filterName === \"organization_or_person\");\n      if (!containsOrganizationOrPersonFilter) {\n        this.personOrOrganizationValue = \"all\";\n      }\n    },\n    typeOfContactToShow() {\n      if (this.contactFilters.length > 0 || this.contactFiltersSort.length > 0) {\n        this.$store.dispatch(\"getContactsWithFiltersByType\", this.typeOfContactToShow);\n      } else {\n        this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\n      }\n      this.populateContactTableRows();\n    }\n  }\n};","map":{"version":3,"names":["TableView","TableViewFooter","mapGetters","AddContactForm","contactHelper","axios","data","contactTableRows","filterValue","selectedIndex","filterName","chosenFormText","personOrOrganizationValue","unShowFormFunction","undefined","components","computed","filterableContactTableRows","filter","row","filterable","currentContactForm","contacts","contactsToChange","contactFilters","contactFiltersSort","totalCount","contactFirstPage","contactLastPage","typeOfContactToShow","methods","rejectWorkerOrJobCandidate","length","post","withCredentials","customerAddFormOpen","$store","dispatch","setValuesToChange","valuesToChange","commit","removeContacts","message","addFilterPersonOrOrganization","event","target","value","addFilter","removeFilter","collumName","addFilterSort","ascending","removeFilterSort","addPage","removePage","getContactText","getContactNameText","goToContactPage","contact","$router","push","populateContactTableRows","displayText","sortable","bigger","mounted","localStorage","getItem","slice","watch","containsOrganizationOrPersonFilter","some"],"sources":["src/Contacts-frontend/Components/ContactsByTypeDashobard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"main-bar-buttons\">\r\n      <div class=\"main-bar-add-button-container\">\r\n        <button @click=\"customerAddFormOpen\">\r\n          Add {{ getContactText() }}\r\n\r\n          <i class=\"material-icons\"> person_add </i>\r\n        </button>\r\n\r\n        <button\r\n          @click=\"removeContacts('Dou you want to delete these contacts')\"\r\n        >\r\n          Remove {{ getContactText() }}\r\n\r\n          <i class=\"material-icons\"> person_remove </i>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"main-bar-filter-container\">\r\n        <select v-model=\"filterName\">\r\n          <option\r\n            v-for=\"(row, index) in filterableContactTableRows\"\r\n            :key=\"index\"\r\n            :value=\"row.value\"\r\n          >\r\n            {{ row.displayText }}\r\n          </option>\r\n        </select>\r\n        <select\r\n          v-model=\"personOrOrganizationValue\"\r\n          @change=\"addFilterPersonOrOrganization\"\r\n        >\r\n          <option value=\"all\">All</option>\r\n          <option value=\"person\">Person</option>\r\n          <option value=\"organization\">Organization</option>\r\n        </select>\r\n        <input v-model=\"filterValue\" type=\"text\" />\r\n        <button @click=\"addFilter\">Filter</button>\r\n      </div>\r\n\r\n      <div class=\"main-bar-service-button-container\">\r\n        <button v-if=\"typeOfContactToShow === 'worker'\">\r\n          Change Seniority <span class=\"material-icons\"> person_search </span>\r\n        </button>\r\n        <button\r\n          v-if=\"\r\n            typeOfContactToShow === 'worker' ||\r\n            typeOfContactToShow === 'jobCandidate'\r\n          \"\r\n        >\r\n          {{\r\n            typeOfContactToShow === \"worker\"\r\n              ? \"Change Worker role\"\r\n              : \"Change position to apply\"\r\n          }}\r\n          <span class=\"material-icons\"> engineering </span>\r\n        </button>\r\n        <button\r\n          @click=\"rejectWorkerOrJobCandidate\"\r\n          v-if=\"\r\n            typeOfContactToShow === 'worker' ||\r\n            typeOfContactToShow === 'jobCandidate'\r\n          \"\r\n        >\r\n          {{ typeOfContactToShow === \"worker\" ? \"Fire\" : \"Reject\" }}\r\n          <span class=\"material-icons\"> domain_disabled </span>\r\n        </button>\r\n        <button v-if=\"typeOfContactToShow === 'jobCandidate'\">\r\n          Select\r\n          <span class=\"material-icons\"> add_business </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <table-view\r\n      :rows=\"contactTableRows\"\r\n      :values=\"contacts\"\r\n      :id-of-value-to-change-by=\"'contact_id'\"\r\n      :clickable=\"true\"\r\n      :set-values-to-change=\"setValuesToChange\"\r\n      :filter-values=\"contactFilters\"\r\n      :remove-filter-func=\"removeFilter\"\r\n      :add-filter-sort=\"addFilterSort\"\r\n      :remove-filter-sort=\"removeFilterSort\"\r\n      :filter-values-sort=\"contactFiltersSort\"\r\n      :updateFunc=\"goToContactPage\"\r\n    />\r\n    <table-view-footer\r\n      :page=\"contactFirstPage\"\r\n      :total=\"totalCount\"\r\n      :total-message=\"`Total number ${getContactText()}s of is`\"\r\n      :last-page=\"contactLastPage\"\r\n      :decrement-page=\"removePage\"\r\n      :increment-page=\"addPage\"\r\n    />\r\n\r\n    <add-contact-form\r\n      ref=\"addContactForm\"\r\n      v-if=\"currentContactForm.length > 0\"\r\n    />\r\n  </div>\r\n</template>\r\n<script>\r\nimport TableView from \"../../Dashboard/Components/Core/TableView.vue\";\r\nimport TableViewFooter from \"../../Dashboard/Components/Core/TableViewFooter.vue\";\r\nimport { mapGetters } from \"vuex\";\r\nimport AddContactForm from \"./AddContactForm.vue\";\r\nimport contactHelper from \"../ContactHelper\";\r\nimport axios from \"axios\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      contactTableRows: [],\r\n      filterValue: \"\",\r\n      selectedIndex: 0,\r\n      filterName: \"\",\r\n      chosenFormText: \"\",\r\n      personOrOrganizationValue: \"\",\r\n      unShowFormFunction: undefined,\r\n    };\r\n  },\r\n  components: {\r\n    TableView,\r\n    TableViewFooter,\r\n    AddContactForm,\r\n  },\r\n\r\n  computed: {\r\n    filterableContactTableRows() {\r\n      return this.contactTableRows.filter((row) => row.filterable);\r\n    },\r\n\r\n    ...mapGetters({\r\n      currentContactForm: \"currentContactForm\",\r\n      contacts: \"contacts\",\r\n      contactsToChange: \"contactsToChange\",\r\n      contactFilters: \"contactFilters\",\r\n      contactFiltersSort: \"contactFiltersSort\",\r\n      totalCount: \"totalCount\",\r\n      contactFirstPage: \"contactFirstPage\",\r\n      contactLastPage: \"contactLastPage\",\r\n      typeOfContactToShow: \"typeOfContactToShow\",\r\n    }),\r\n  },\r\n\r\n  methods: {\r\n    rejectWorkerOrJobCandidate() {\r\n      if (this.contactsToChange.length === 0) {\r\n        return;\r\n      }\r\n      axios.post(\r\n        \"http://localhost:5000/contact/contact-fire\",\r\n        this.contactsToChange,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n    },\r\n\r\n    customerAddFormOpen() {\r\n      this.$store.dispatch(\r\n        \"updateCurrentContactForm\",\r\n        this.typeOfContactToShow\r\n      );\r\n    },\r\n\r\n    setValuesToChange(valuesToChange) {\r\n      this.$store.commit(\"setConstactsToChange\", valuesToChange);\r\n    },\r\n\r\n    removeContacts(message) {\r\n      if (this.contactsToChange.length === 0) {\r\n        return 0;\r\n      }\r\n      this.$store.commit(\"showDoYouWantToModal\", message);\r\n      this.$store.dispatch(\"setDoYouWantToModalFunction\", \"deleteContacts\");\r\n    },\r\n\r\n    addFilterPersonOrOrganization(event) {\r\n      this.$store.dispatch(\"addFilterstToContact\", {\r\n        filterName: \"organization_or_person\",\r\n        filterValue: event.target.value,\r\n      });\r\n\r\n      this.$store.dispatch(\r\n        \"getContactsWithFiltersByType\",\r\n        this.typeOfContactToShow\r\n      );\r\n    },\r\n\r\n    addFilter() {\r\n      if (this.filterName.length === 0 || this.filterValue.length === 0) {\r\n        return;\r\n      }\r\n\r\n      this.$store.dispatch(\"addFilterstToContact\", {\r\n        filterName: this.filterName,\r\n        filterValue: this.filterValue,\r\n      });\r\n\r\n      this.$store.dispatch(\r\n        \"getContactsWithFiltersByType\",\r\n        this.typeOfContactToShow\r\n      );\r\n      this.filterValue = \"\";\r\n    },\r\n\r\n    removeFilter(collumName) {\r\n      this.$store.dispatch(\"removeFilterContacts\", collumName);\r\n      this.$store.dispatch(\r\n        \"getContactsWithFiltersByType\",\r\n        this.typeOfContactToShow\r\n      );\r\n    },\r\n\r\n    async addFilterSort(collumName, ascending) {\r\n      await this.$store.dispatch(\"addFilterSortForContacts\", {\r\n        filterName: collumName,\r\n        ascending: ascending,\r\n      });\r\n\r\n      await this.$store.dispatch(\r\n        \"getContactsWithFiltersByType\",\r\n        this.typeOfContactToShow\r\n      );\r\n    },\r\n    async removeFilterSort(collumName) {\r\n      await this.$store.dispatch(\"removeFilterSortForContacts\", collumName);\r\n      await this.$store.dispatch(\r\n        \"getContactsWithFiltersByType\",\r\n        this.typeOfContactToShow\r\n      );\r\n    },\r\n\r\n    addPage() {\r\n      if (this.contactFirstPage + 1 > this.contactLastPage) {\r\n        return;\r\n      }\r\n      this.$store.commit(\"setContactFirstPage\", this.contactFirstPage + 1);\r\n      if (\r\n        this.contactFilters.length > 0 ||\r\n        this.contactFiltersSort.length > 0\r\n      ) {\r\n        this.$store.dispatch(\r\n          \"getContactsWithFiltersByType\",\r\n          this.typeOfContactToShow\r\n        );\r\n      } else {\r\n        this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\r\n      }\r\n    },\r\n\r\n    removePage() {\r\n      if (this.contactFirstPage - 1 < 1) {\r\n        return;\r\n      }\r\n      this.$store.commit(\"setContactFirstPage\", this.contactFirstPage - 1);\r\n      if (\r\n        this.contactFilters.length > 0 ||\r\n        this.contactFiltersSort.length > 0\r\n      ) {\r\n        this.$store.dispatch(\r\n          \"getContactsWithFiltersByType\",\r\n          this.typeOfContactToShow\r\n        );\r\n      } else {\r\n        this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\r\n      }\r\n    },\r\n\r\n    getContactText() {\r\n      return contactHelper.getContactNameText(this.typeOfContactToShow);\r\n    },\r\n\r\n    goToContactPage(contact) {\r\n      this.$store.commit(\"setContactToUpdate\", contact);\r\n      this.$router.push(\"/Contacts/ContactPage\");\r\n    },\r\n\r\n    populateContactTableRows() {\r\n      this.contactTableRows = [\r\n        {\r\n          displayText: \"First name\",\r\n          value: \"first_name\",\r\n          sortable: true,\r\n          filterable: true,\r\n        },\r\n        {\r\n          displayText: \"Last name\",\r\n          value: \"last_name\",\r\n          sortable: true,\r\n          filterable: true,\r\n        },\r\n        {\r\n          displayText: \"Created\",\r\n          value: \"created_at\",\r\n          sortable: true,\r\n        },\r\n        {\r\n          displayText: \"Address\",\r\n          value: \"address\",\r\n          sortable: true,\r\n          filterable: true,\r\n        },\r\n        {\r\n          displayText: \"Telephone\",\r\n          value: \"tel_number\",\r\n          sortable: true,\r\n          filterable: true,\r\n        },\r\n        {\r\n          displayText: \"Contact email\",\r\n          value: \"email\",\r\n          sortable: true,\r\n          filterable: true,\r\n        },\r\n      ];\r\n\r\n      switch (this.typeOfContactToShow) {\r\n        case \"vendor\":\r\n        case \"customer\":\r\n          this.contactTableRows.push(\r\n            {\r\n              displayText: \"Organization name\",\r\n              value: \"organization_name\",\r\n              bigger: true,\r\n              sortable: true,\r\n            },\r\n            {\r\n              displayText: \"Organization/Person\",\r\n              value: \"organization_or_person\",\r\n              bigger: true,\r\n              sortable: true,\r\n              filterable: true,\r\n            }\r\n          );\r\n          break;\r\n\r\n        case \"jobCandidate\":\r\n          this.contactTableRows.push(\r\n            {\r\n              displayText: \"Worker role\",\r\n              value: \"worker_role\",\r\n            },\r\n            {\r\n              displayText: \"Hired\",\r\n              value: \"hired\",\r\n              sortable: true,\r\n            }\r\n          );\r\n          break;\r\n\r\n        case \"worker\":\r\n          this.contactTableRows.push(\r\n            {\r\n              displayText: \"Seniority\",\r\n              value: \"seniority\",\r\n            },\r\n            {\r\n              displayText: \"Worker role\",\r\n              value: \"worker_role\",\r\n            },\r\n            {\r\n              displayText: \"Hired\",\r\n              value: \"hired\",\r\n              sortable: true,\r\n            }\r\n          );\r\n          break;\r\n      }\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.populateContactTableRows();\r\n\r\n    if (this.typeOfContactToShow.length === 0) {\r\n      this.$store.commit(\r\n        \"setTypeOfContactToShow\",\r\n        localStorage.getItem(\"activeSubMenu\").slice(0, -1)\r\n      );\r\n    }\r\n    await this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\r\n  },\r\n\r\n  watch: {\r\n    contactFilters() {\r\n      const containsOrganizationOrPersonFilter = this.contactFilters.some(\r\n        (filter) => filter.filterName === \"organization_or_person\"\r\n      );\r\n      if (!containsOrganizationOrPersonFilter) {\r\n        this.personOrOrganizationValue = \"all\";\r\n      }\r\n    },\r\n\r\n    typeOfContactToShow() {\r\n      if (\r\n        this.contactFilters.length > 0 ||\r\n        this.contactFiltersSort.length > 0\r\n      ) {\r\n        this.$store.dispatch(\r\n          \"getContactsWithFiltersByType\",\r\n          this.typeOfContactToShow\r\n        );\r\n      } else {\r\n        this.$store.dispatch(\"getContactsByType\", this.typeOfContactToShow);\r\n      }\r\n\r\n      this.populateContactTableRows();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.main-bar-buttons {\r\n  width: 100%;\r\n  height: 60px;\r\n  padding-left: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.main-bar-add-button-container {\r\n  width: 400px;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n\r\n  button {\r\n    display: flex;\r\n    width: 200px;\r\n    height: 30px;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    margin: 0 10px;\r\n    background-color: #2c3968;\r\n    color: whitesmoke;\r\n    border: none;\r\n    border-radius: 2px;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    &:hover {\r\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\r\n        rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\r\n    }\r\n  }\r\n\r\n  select {\r\n    display: flex;\r\n    text-align: start;\r\n    padding-left: 5px;\r\n    width: 170px;\r\n    height: 30px;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    margin: 0 10px;\r\n    background-color: #2c3968;\r\n    color: whitesmoke;\r\n    border: none;\r\n    border-radius: 2px;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    &:hover {\r\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\r\n        rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\r\n    }\r\n\r\n    &:focus {\r\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\r\n        rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\r\n      outline: none;\r\n      border: none;\r\n    }\r\n  }\r\n}\r\n\r\n.main-bar-filter-container {\r\n  width: 600px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  height: 100%;\r\n\r\n  button {\r\n    display: flex;\r\n    width: 120px;\r\n    height: 25px;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    margin: 0 10px;\r\n    background-color: #2c3968;\r\n    color: whitesmoke;\r\n    border: none;\r\n    border-radius: 2px;\r\n    letter-spacing: 3px;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    &:hover {\r\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\r\n        rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\r\n    }\r\n  }\r\n\r\n  select {\r\n    width: 130px;\r\n    height: 25px;\r\n    background-color: #2c3968;\r\n    color: whitesmoke;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 2px;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    &:hover {\r\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\r\n        rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\r\n    }\r\n  }\r\n\r\n  input {\r\n    width: 150px;\r\n    height: 25px;\r\n    background-color: #2c3968;\r\n    color: whitesmoke;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 2px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    transition: 0.3s;\r\n\r\n    &:focus {\r\n      background-color: #435b93;\r\n      box-shadow: 0 0 5px rgba(255, 255, 255, 0.7); /* Add box shadow on focus */\r\n    }\r\n  }\r\n}\r\n\r\n.main-bar-service-button-container {\r\n  width: 400px;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n\r\n  button {\r\n    display: flex;\r\n    width: 180px;\r\n    flex: 0 0 auto;\r\n    height: 30px;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    margin: 0 10px;\r\n    background-color: #2c3968;\r\n    color: whitesmoke;\r\n    border: none;\r\n    border-radius: 2px;\r\n    font-size: 0.75rem;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\r\n        rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}