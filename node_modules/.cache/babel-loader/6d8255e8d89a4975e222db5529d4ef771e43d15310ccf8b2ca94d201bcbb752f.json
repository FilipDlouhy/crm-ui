{"ast":null,"code":"import Vuex from \"vuex\";\nimport Vue from \"vue\";\nimport Axios from \"axios\";\nVue.use(Vuex);\nconst userState = {\n  state: {\n    isUserLogged: null,\n    userRights: []\n  },\n  mutations: {\n    setLoginState(state, loginStatus) {\n      state.isUserLogged = loginStatus;\n    },\n    setUserRights(state, userRights) {\n      console.log(userRights);\n      state.userRights = userRights;\n    }\n  },\n  actions: {\n    checkUserLogin({\n      commit\n    }) {\n      let isLogenzi;\n      Axios.get(\"http://localhost:5000/check-token-from-login\", {\n        withCredentials: true\n      }).then(response => {\n        if (response.data.isLogged === true) {\n          isLogenzi = true;\n          const userRights = response.data.rights.map(roleRight => {\n            return roleRight.rights.map(right => {\n              return right.name;\n            });\n          });\n\n          // Flatten the array and remove duplicates using a Set\n          const uniqueUserRighs = [...new Set(userRights.flat())];\n          commit(\"setLoginState\", true);\n          commit(\"setUserRights\", uniqueUserRighs);\n        } else {\n          isLogenzi = false;\n          commit(\"setLoginState\", false);\n        }\n      }).catch(error => {\n        isLogenzi = false;\n\n        // add error handling\n        console.log(error);\n      });\n      return false;\n    },\n    setIsUserLogged({\n      commit\n    }, isLogged) {\n      commit(\"setLoginState\", isLogged);\n    },\n    async updateUserRights({\n      commit\n    }) {\n      const response = await Axios.get(\"http://localhost:5000/user/get-user-rights\", {\n        withCredentials: true\n      });\n      const userRights = response.data.rights.map(roleRight => {\n        return roleRight.rights.map(right => {\n          return right.name;\n        });\n      });\n\n      // Flatten the array and remove duplicates using a Set\n      const uniqueUserRighs = [...new Set(userRights.flat())];\n      commit(\"setUserRights\", uniqueUserRighs);\n    }\n  },\n  getters: {\n    isUserLogged: state => state.isUserLogged,\n    userRights: state => state.userRights\n  }\n};\nexport default userState;","map":{"version":3,"names":["Vuex","Vue","Axios","use","userState","state","isUserLogged","userRights","mutations","setLoginState","loginStatus","setUserRights","console","log","actions","checkUserLogin","commit","isLogenzi","get","withCredentials","then","response","data","isLogged","rights","map","roleRight","right","name","uniqueUserRighs","Set","flat","catch","error","setIsUserLogged","updateUserRights","getters"],"sources":["C:/Users/jdlou/OneDrive/Plocha/crmproject/crm-frontend/src/State/userState.js"],"sourcesContent":["import Vuex from \"vuex\";\r\nimport Vue from \"vue\";\r\nimport Axios from \"axios\";\r\n\r\nVue.use(Vuex);\r\n\r\nconst userState = {\r\n  state: {\r\n    isUserLogged: null,\r\n    userRights: [],\r\n  },\r\n\r\n  mutations: {\r\n    setLoginState(state, loginStatus) {\r\n      state.isUserLogged = loginStatus;\r\n    },\r\n\r\n    setUserRights(state, userRights) {\r\n      console.log(userRights);\r\n\r\n      state.userRights = userRights;\r\n    },\r\n  },\r\n\r\n  actions: {\r\n    checkUserLogin({ commit }) {\r\n      let isLogenzi;\r\n      Axios.get(\"http://localhost:5000/check-token-from-login\", {\r\n        withCredentials: true,\r\n      })\r\n        .then((response) => {\r\n          if (response.data.isLogged === true) {\r\n            isLogenzi = true;\r\n            const userRights = response.data.rights.map((roleRight) => {\r\n              return roleRight.rights.map((right) => {\r\n                return right.name;\r\n              });\r\n            });\r\n\r\n            // Flatten the array and remove duplicates using a Set\r\n            const uniqueUserRighs = [...new Set(userRights.flat())];\r\n            commit(\"setLoginState\", true);\r\n            commit(\"setUserRights\", uniqueUserRighs);\r\n          } else {\r\n            isLogenzi = false;\r\n\r\n            commit(\"setLoginState\", false);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          isLogenzi = false;\r\n\r\n          // add error handling\r\n          console.log(error);\r\n        });\r\n\r\n      return false;\r\n    },\r\n\r\n    setIsUserLogged({ commit }, isLogged) {\r\n      commit(\"setLoginState\", isLogged);\r\n    },\r\n\r\n    async updateUserRights({ commit }) {\r\n      const response = await Axios.get(\r\n        \"http://localhost:5000/user/get-user-rights\",\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      const userRights = response.data.rights.map((roleRight) => {\r\n        return roleRight.rights.map((right) => {\r\n          return right.name;\r\n        });\r\n      });\r\n\r\n      // Flatten the array and remove duplicates using a Set\r\n      const uniqueUserRighs = [...new Set(userRights.flat())];\r\n      commit(\"setUserRights\", uniqueUserRighs);\r\n    },\r\n  },\r\n\r\n  getters: {\r\n    isUserLogged: (state) => state.isUserLogged,\r\n    userRights: (state) => state.userRights,\r\n  },\r\n};\r\n\r\nexport default userState;\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,GAAG,MAAM,KAAK;AACrB,OAAOC,KAAK,MAAM,OAAO;AAEzBD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC;AAEb,MAAMI,SAAS,GAAG;EAChBC,KAAK,EAAE;IACLC,YAAY,EAAE,IAAI;IAClBC,UAAU,EAAE;EACd,CAAC;EAEDC,SAAS,EAAE;IACTC,aAAaA,CAACJ,KAAK,EAAEK,WAAW,EAAE;MAChCL,KAAK,CAACC,YAAY,GAAGI,WAAW;IAClC,CAAC;IAEDC,aAAaA,CAACN,KAAK,EAAEE,UAAU,EAAE;MAC/BK,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC;MAEvBF,KAAK,CAACE,UAAU,GAAGA,UAAU;IAC/B;EACF,CAAC;EAEDO,OAAO,EAAE;IACPC,cAAcA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACzB,IAAIC,SAAS;MACbf,KAAK,CAACgB,GAAG,CAAC,8CAA8C,EAAE;QACxDC,eAAe,EAAE;MACnB,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,QAAQ,KAAK,IAAI,EAAE;UACnCN,SAAS,GAAG,IAAI;UAChB,MAAMV,UAAU,GAAGc,QAAQ,CAACC,IAAI,CAACE,MAAM,CAACC,GAAG,CAAEC,SAAS,IAAK;YACzD,OAAOA,SAAS,CAACF,MAAM,CAACC,GAAG,CAAEE,KAAK,IAAK;cACrC,OAAOA,KAAK,CAACC,IAAI;YACnB,CAAC,CAAC;UACJ,CAAC,CAAC;;UAEF;UACA,MAAMC,eAAe,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACvB,UAAU,CAACwB,IAAI,CAAC,CAAC,CAAC,CAAC;UACvDf,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC;UAC7BA,MAAM,CAAC,eAAe,EAAEa,eAAe,CAAC;QAC1C,CAAC,MAAM;UACLZ,SAAS,GAAG,KAAK;UAEjBD,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;QAChC;MACF,CAAC,CAAC,CACDgB,KAAK,CAAEC,KAAK,IAAK;QAChBhB,SAAS,GAAG,KAAK;;QAEjB;QACAL,OAAO,CAACC,GAAG,CAACoB,KAAK,CAAC;MACpB,CAAC,CAAC;MAEJ,OAAO,KAAK;IACd,CAAC;IAEDC,eAAeA,CAAC;MAAElB;IAAO,CAAC,EAAEO,QAAQ,EAAE;MACpCP,MAAM,CAAC,eAAe,EAAEO,QAAQ,CAAC;IACnC,CAAC;IAED,MAAMY,gBAAgBA,CAAC;MAAEnB;IAAO,CAAC,EAAE;MACjC,MAAMK,QAAQ,GAAG,MAAMnB,KAAK,CAACgB,GAAG,CAC9B,4CAA4C,EAC5C;QACEC,eAAe,EAAE;MACnB,CACF,CAAC;MAED,MAAMZ,UAAU,GAAGc,QAAQ,CAACC,IAAI,CAACE,MAAM,CAACC,GAAG,CAAEC,SAAS,IAAK;QACzD,OAAOA,SAAS,CAACF,MAAM,CAACC,GAAG,CAAEE,KAAK,IAAK;UACrC,OAAOA,KAAK,CAACC,IAAI;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,MAAMC,eAAe,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACvB,UAAU,CAACwB,IAAI,CAAC,CAAC,CAAC,CAAC;MACvDf,MAAM,CAAC,eAAe,EAAEa,eAAe,CAAC;IAC1C;EACF,CAAC;EAEDO,OAAO,EAAE;IACP9B,YAAY,EAAGD,KAAK,IAAKA,KAAK,CAACC,YAAY;IAC3CC,UAAU,EAAGF,KAAK,IAAKA,KAAK,CAACE;EAC/B;AACF,CAAC;AAED,eAAeH,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}