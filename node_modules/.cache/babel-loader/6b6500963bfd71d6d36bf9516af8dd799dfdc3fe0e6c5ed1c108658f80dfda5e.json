{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport { addSelectedFilter, removeSelectedFilter, addSelectedFilterSort } from \"../../Dashboard/Components/Core/FilterHelper/FilterHelper\";\nconst contactState = {\n  state: {\n    contacts: [],\n    contactsToChange: [],\n    contactFilters: [],\n    contactFiltersSort: [],\n    totalCount: 0,\n    contactFirstPage: 1,\n    contactLastPage: 0\n  },\n  mutations: {\n    setConstacts(state, contact) {\n      state.contacts = contact;\n    },\n    setConstactsToChange(state, contactsToChange) {\n      state.contactsToChange = contactsToChange;\n    },\n    setConstactFilters(state, contactFilters) {\n      state.contactFilters = contactFilters;\n    },\n    setConstactFiltersSort(state, contactFiltersSort) {\n      state.contactFiltersSort = contactFiltersSort;\n    },\n    setTotalCount(state, totalCount) {\n      state.totalCount = totalCount;\n    },\n    setContactFirstPage(state, contactFirstPage) {\n      state.contactFirstPage = contactFirstPage;\n    },\n    setContactLastPage(state, contactLastPage) {\n      state.contactLastPage = contactLastPage;\n    }\n  },\n  actions: {\n    // Action to add a contact\n    async getContacts({\n      commit,\n      state\n    }) {\n      const response = await axios.get(\"http://localhost:5000/contact/get-contacts\", {\n        params: {\n          page: state.contactFirstPage\n        },\n        withCredentials: true\n      });\n      commit(\"setTotalCount\", response.data.count);\n      commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\n      commit(\"setConstacts\", response.data.contacts);\n    },\n    async addContact({\n      commit,\n      state\n    }, contact) {\n      let newContacts = state.contacts;\n      if (state.contacts.length < 25) {\n        newContacts.push(contact);\n      } else {\n        newContacts.pop();\n        newContacts.push(contact);\n      }\n      commit(\"setConstacts\", newContacts);\n    },\n    async deleteContacts({\n      commit,\n      state\n    }) {\n      const response = await axios.post(\"http://localhost:5000/contact/remove-contacts\", state.contactsToChange, {\n        withCredentials: true\n      });\n      if (!response.data.error) {\n        const filteredContacts = state.contacts.filter(contact => !state.contactsToChange.includes(contact.contact_id));\n        commit(\"setConstacts\", filteredContacts);\n        commit(\"setTotalCount\", response.data.count);\n        commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\n      }\n      return response;\n    },\n    addFilterstToContact({\n      commit,\n      state\n    }, filter) {\n      let newContactFilterArray;\n      if (filter.filterName === \"organization_or_person\") {\n        newContactFilterArray = state.contactFilters.filter(filter => {\n          return filter.filterName !== \"organization_or_person\";\n        });\n        if (filter.filterValue !== \"all\") {\n          newContactFilterArray.push(filter);\n        }\n      }\n      if (filter.filterName !== \"organization_or_person\") {\n        newContactFilterArray = addSelectedFilter(state.contactFilters, {\n          filterName: filter.filterName,\n          filterValue: filter.filterValue\n        });\n      }\n      commit(\"setConstactFilters\", newContactFilterArray);\n    },\n    async getContactsWithFilters({\n      commit,\n      state\n    }) {\n      const response = await axios.post(\"http://localhost:5000/contact/get-contacts-with-filters\", {\n        filters: state.contactFilters,\n        sortables: state.contactFiltersSort,\n        page: state.contactFirstPage\n      }, {\n        withCredentials: true\n      });\n      commit(\"setConstacts\", response.data.contacts);\n      commit(\"setTotalCount\", response.data.count);\n      commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\n    },\n    removeFilterContacts({\n      commit,\n      state\n    }, filterName) {\n      const newFilterArray = removeSelectedFilter(state.contactFilters, filterName);\n      commit(\"setConstactFilters\", newFilterArray);\n    },\n    addFilterSortForContacts({\n      commit,\n      state\n    }, filter) {\n      const newSortables = addSelectedFilterSort(state.contactFiltersSort, filter);\n      commit(\"setConstactFiltersSort\", newSortables);\n    },\n    removeFilterSortForContacts({\n      commit,\n      state\n    }, filterName) {\n      const newSortables = removeSelectedFilter(state.contactFiltersSort, filterName);\n      commit(\"setConstactFiltersSort\", newSortables);\n    }\n  },\n  getters: {\n    contacts(state) {\n      return state.contacts;\n    },\n    contactsToChange(state) {\n      return state.contactsToChange;\n    },\n    contactFilters(state) {\n      return state.contactFilters;\n    },\n    contactFiltersSort(state) {\n      return state.contactFiltersSort;\n    },\n    totalCount(state) {\n      return state.totalCount;\n    },\n    contactFirstPage(state) {\n      return state.contactFirstPage;\n    },\n    contactLastPage(state) {\n      return state.contactLastPage;\n    }\n  }\n};\nexport default contactState;","map":{"version":3,"names":["axios","addSelectedFilter","removeSelectedFilter","addSelectedFilterSort","contactState","state","contacts","contactsToChange","contactFilters","contactFiltersSort","totalCount","contactFirstPage","contactLastPage","mutations","setConstacts","contact","setConstactsToChange","setConstactFilters","setConstactFiltersSort","setTotalCount","setContactFirstPage","setContactLastPage","actions","getContacts","commit","response","get","params","page","withCredentials","data","count","Math","ceil","addContact","newContacts","length","push","pop","deleteContacts","post","error","filteredContacts","filter","includes","contact_id","addFilterstToContact","newContactFilterArray","filterName","filterValue","getContactsWithFilters","filters","sortables","removeFilterContacts","newFilterArray","addFilterSortForContacts","newSortables","removeFilterSortForContacts","getters"],"sources":["C:/Users/jdlou/OneDrive/Plocha/crmproject/crm-frontend/src/Contacts-frontend/State/contactState.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  addSelectedFilter,\r\n  removeSelectedFilter,\r\n  addSelectedFilterSort,\r\n} from \"../../Dashboard/Components/Core/FilterHelper/FilterHelper\";\r\nconst contactState = {\r\n  state: {\r\n    contacts: [],\r\n    contactsToChange: [],\r\n    contactFilters: [],\r\n    contactFiltersSort: [],\r\n    totalCount: 0,\r\n    contactFirstPage: 1,\r\n    contactLastPage: 0,\r\n  },\r\n  mutations: {\r\n    setConstacts(state, contact) {\r\n      state.contacts = contact;\r\n    },\r\n    setConstactsToChange(state, contactsToChange) {\r\n      state.contactsToChange = contactsToChange;\r\n    },\r\n    setConstactFilters(state, contactFilters) {\r\n      state.contactFilters = contactFilters;\r\n    },\r\n\r\n    setConstactFiltersSort(state, contactFiltersSort) {\r\n      state.contactFiltersSort = contactFiltersSort;\r\n    },\r\n\r\n    setTotalCount(state, totalCount) {\r\n      state.totalCount = totalCount;\r\n    },\r\n    setContactFirstPage(state, contactFirstPage) {\r\n      state.contactFirstPage = contactFirstPage;\r\n    },\r\n    setContactLastPage(state, contactLastPage) {\r\n      state.contactLastPage = contactLastPage;\r\n    },\r\n  },\r\n  actions: {\r\n    // Action to add a contact\r\n    async getContacts({ commit, state }) {\r\n      const response = await axios.get(\r\n        \"http://localhost:5000/contact/get-contacts\",\r\n        {\r\n          params: { page: state.contactFirstPage },\r\n          withCredentials: true,\r\n        }\r\n      );\r\n      commit(\"setTotalCount\", response.data.count);\r\n      commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\r\n      commit(\"setConstacts\", response.data.contacts);\r\n    },\r\n\r\n    async addContact({ commit, state }, contact) {\r\n      let newContacts = state.contacts;\r\n\r\n      if (state.contacts.length < 25) {\r\n        newContacts.push(contact);\r\n      } else {\r\n        newContacts.pop();\r\n        newContacts.push(contact);\r\n      }\r\n\r\n      commit(\"setConstacts\", newContacts);\r\n    },\r\n\r\n    async deleteContacts({ commit, state }) {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/contact/remove-contacts\",\r\n        state.contactsToChange,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      if (!response.data.error) {\r\n        const filteredContacts = state.contacts.filter(\r\n          (contact) => !state.contactsToChange.includes(contact.contact_id)\r\n        );\r\n        commit(\"setConstacts\", filteredContacts);\r\n\r\n        commit(\"setTotalCount\", response.data.count);\r\n        commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\r\n      }\r\n\r\n      return response;\r\n    },\r\n\r\n    addFilterstToContact({ commit, state }, filter) {\r\n      let newContactFilterArray;\r\n      if (filter.filterName === \"organization_or_person\") {\r\n        newContactFilterArray = state.contactFilters.filter((filter) => {\r\n          return filter.filterName !== \"organization_or_person\";\r\n        });\r\n\r\n        if (filter.filterValue !== \"all\") {\r\n          newContactFilterArray.push(filter);\r\n        }\r\n      }\r\n\r\n      if (filter.filterName !== \"organization_or_person\") {\r\n        newContactFilterArray = addSelectedFilter(state.contactFilters, {\r\n          filterName: filter.filterName,\r\n          filterValue: filter.filterValue,\r\n        });\r\n      }\r\n      commit(\"setConstactFilters\", newContactFilterArray);\r\n    },\r\n\r\n    async getContactsWithFilters({ commit, state }) {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/contact/get-contacts-with-filters\",\r\n        {\r\n          filters: state.contactFilters,\r\n          sortables: state.contactFiltersSort,\r\n          page: state.contactFirstPage,\r\n        },\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n      commit(\"setConstacts\", response.data.contacts);\r\n      commit(\"setTotalCount\", response.data.count);\r\n      commit(\"setContactLastPage\", Math.ceil(response.data.count / 25));\r\n    },\r\n\r\n    removeFilterContacts({ commit, state }, filterName) {\r\n      const newFilterArray = removeSelectedFilter(\r\n        state.contactFilters,\r\n        filterName\r\n      );\r\n      commit(\"setConstactFilters\", newFilterArray);\r\n    },\r\n\r\n    addFilterSortForContacts({ commit, state }, filter) {\r\n      const newSortables = addSelectedFilterSort(\r\n        state.contactFiltersSort,\r\n        filter\r\n      );\r\n      commit(\"setConstactFiltersSort\", newSortables);\r\n    },\r\n\r\n    removeFilterSortForContacts({ commit, state }, filterName) {\r\n      const newSortables = removeSelectedFilter(\r\n        state.contactFiltersSort,\r\n        filterName\r\n      );\r\n      commit(\"setConstactFiltersSort\", newSortables);\r\n    },\r\n  },\r\n  getters: {\r\n    contacts(state) {\r\n      return state.contacts;\r\n    },\r\n\r\n    contactsToChange(state) {\r\n      return state.contactsToChange;\r\n    },\r\n    contactFilters(state) {\r\n      return state.contactFilters;\r\n    },\r\n    contactFiltersSort(state) {\r\n      return state.contactFiltersSort;\r\n    },\r\n\r\n    totalCount(state) {\r\n      return state.totalCount;\r\n    },\r\n    contactFirstPage(state) {\r\n      return state.contactFirstPage;\r\n    },\r\n    contactLastPage(state) {\r\n      return state.contactLastPage;\r\n    },\r\n  },\r\n};\r\n\r\nexport default contactState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}