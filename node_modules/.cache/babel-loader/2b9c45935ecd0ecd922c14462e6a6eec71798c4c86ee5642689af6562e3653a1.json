{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\nimport store from \"@/store\";\nVue.use(VueRouter);\nconst routes = [{\n  path: \"/Users\",\n  component: UsersDashboard\n}, {\n  path: \"/Roles\",\n  component: RolesDashboard,\n  beforeEnter: async (to, from, next) => {\n    const kunda = await store.dispatch(\"checkUserLogin\");\n    console.log(kunda);\n  }\n}];\nconst router = new VueRouter({\n  routes\n});\n\n// Add a navigation guard to check if a route requires authentication\nrouter.beforeEach(async (to, from, next) => {\n  const isAuthenticated = await store.getters.isUserLogged;\n\n  // Check if the route requires authentication and the user is not authenticated\n  if (to.matched.some(record => record.meta.requiresAuth) && !isAuthenticated && isAuthenticated != null) {} else {\n    next(); // Proceed to the route\n  }\n});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","UsersDashboard","RolesDashboard","store","use","routes","path","component","beforeEnter","to","from","next","kunda","dispatch","console","log","router","beforeEach","isAuthenticated","getters","isUserLogged","matched","some","record","meta","requiresAuth"],"sources":["C:/Users/jdlou/OneDrive/Plocha/crmproject/crm-frontend/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport UsersDashboard from \"../Users-Frontend/Components/UsersDashboard.vue\";\nimport RolesDashboard from \"../Users-Frontend/Components/RolesDashboard.vue\";\n\nimport store from \"@/store\";\n\nVue.use(VueRouter);\n\nconst routes = [\n  { path: \"/Users\", component: UsersDashboard },\n  {\n    path: \"/Roles\",\n    component: RolesDashboard,\n    beforeEnter: async (to, from, next) => {\n      const kunda = await store.dispatch(\"checkUserLogin\");\n      console.log(kunda);\n    },\n  },\n];\n\nconst router = new VueRouter({\n  routes,\n});\n\n// Add a navigation guard to check if a route requires authentication\nrouter.beforeEach(async (to, from, next) => {\n  const isAuthenticated = await store.getters.isUserLogged;\n\n  // Check if the route requires authentication and the user is not authenticated\n  if (\n    to.matched.some((record) => record.meta.requiresAuth) &&\n    !isAuthenticated &&\n    isAuthenticated != null\n  ) {\n  } else {\n    next(); // Proceed to the route\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,iDAAiD;AAC5E,OAAOC,cAAc,MAAM,iDAAiD;AAE5E,OAAOC,KAAK,MAAM,SAAS;AAE3BJ,GAAG,CAACK,GAAG,CAACJ,SAAS,CAAC;AAElB,MAAMK,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAEN;AAAe,CAAC,EAC7C;EACEK,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEL,cAAc;EACzBM,WAAW,EAAE,MAAAA,CAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;IACrC,MAAMC,KAAK,GAAG,MAAMT,KAAK,CAACU,QAAQ,CAAC,gBAAgB,CAAC;IACpDC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;EACpB;AACF,CAAC,CACF;AAED,MAAMI,MAAM,GAAG,IAAIhB,SAAS,CAAC;EAC3BK;AACF,CAAC,CAAC;;AAEF;AACAW,MAAM,CAACC,UAAU,CAAC,OAAOR,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C,MAAMO,eAAe,GAAG,MAAMf,KAAK,CAACgB,OAAO,CAACC,YAAY;;EAExD;EACA,IACEX,EAAE,CAACY,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAACC,YAAY,CAAC,IACrD,CAACP,eAAe,IAChBA,eAAe,IAAI,IAAI,EACvB,CACF,CAAC,MAAM;IACLP,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;;AAEF,eAAeK,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}